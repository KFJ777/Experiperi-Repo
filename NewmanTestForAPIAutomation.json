{
  "collection": {
    "_": {
      "postman_id": "dbbb5b8c-b7d9-498f-b7e9-416c64cf64ff",
      "exporter_id": "47309368",
      "collection_link": "https://fidelisbishop-6183451.postman.co/workspace/Bishop-Samuel-Fidelis-Ime's-Wor~954abc98-20c7-4dc2-8bea-498c5829a8cd/collection/47309368-dbbb5b8c-b7d9-498f-b7e9-416c64cf64ff?action=share&source=collection_link&creator=47309368"
    },
    "item": [
      {
        "id": "13d52b1a-6564-42d0-b98b-fe8a6c08aee5",
        "name": "Get All Todo Entries",
        "item": [
          {
            "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
            "name": "Get All Todo Entries",
            "request": {
              "url": {
                "path": [
                  "index.php"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Verify that title is equal to Fusio\", function () {",
                    "",
                    "    var jsonData = pm.response.json();",
                    "",
                    "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                    "});",
                    "",
                    "pm.test(\"Verify that payment currency is EUR\", function () {",
                    "",
                    "    var jsonData = pm.response.json();",
                    "",
                    "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                    "});",
                    "",
                    "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                    "",
                    "    var jsonData = pm.response.json();",
                    "",
                    "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                    "});",
                    "",
                    "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                    "",
                    "    var jsonData = pm.response.json();",
                    "",
                    "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                    "});",
                    "",
                    "pm.test(\"Content-Type is present\", function () {",
                    "    pm.response.to.have.header(\"Content-Type\");",
                    "});",
                    "",
                    "/*pm.test(\"Verify that the scope has default\", function () {",
                    "",
                    "    var jsonData = pm.response.json();",
                    "",
                    "    pm.expect(jsonData.scope).to.eql(\"default\");",
                    "});*/",
                    ""
                  ],
                  "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "c51956b5-731c-461d-a7bd-929079554f43",
        "name": "Get All Entries",
        "item": [
          {
            "id": "3954226a-5a98-4cef-a3ab-2ccfc56707c3",
            "name": "Get All Entries",
            "request": {
              "description": {
                "content": "https://demo.fusio-project.org/index.php/",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "index.php",
                  ""
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "289ca48a-c2b4-43a5-bfdb-fb8b88c9b11d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(200); // Check for 200 status code\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Verify response structure\", function () {\r",
                    "    var jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData).to.have.property('apiVersion'); // Check for apiVersion property\r",
                    "    pm.expect(jsonData).to.have.property('title'); // Check for title property\r",
                    "    pm.expect(jsonData).to.have.property('description'); // Check for description property\r",
                    "    pm.expect(jsonData).to.have.property('paymentCurrency'); // Check for paymentCurrency property\r",
                    "    pm.expect(jsonData).to.have.property('categories'); // Check for categories property\r",
                    "    pm.expect(jsonData.categories).to.be.an('array'); // Check if categories is an array\r",
                    "    pm.expect(jsonData).to.have.property('scopes'); // Check for scopes property\r",
                    "    pm.expect(jsonData.scopes).to.be.an('array'); // Check if scopes is an array\r",
                    "    pm.expect(jsonData).to.have.property('links'); // Check for links property\r",
                    "    pm.expect(jsonData.links).to.be.an('array'); // Check if links is an array\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "2fef1223-5b31-4e26-9f24-fd9359ad9c17"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "ac86d59c-87e7-4d63-bee2-2b7bccfb961a",
        "name": "Get entry per ID",
        "item": [
          {
            "id": "8862e6fd-09df-477f-a21a-196b5da50654",
            "name": "Get entry per ID - Valid ID",
            "request": {
              "description": {
                "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "index.php"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": ""
              }
            },
            "response": [],
            "event": [],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "4b1de347-83ad-4b83-909f-bdd805468d69",
            "name": "Get entry per ID - Invalid ID(params not using TODO ID)",
            "request": {
              "description": {
                "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  ""
                ],
                "host": [
                  "demo",
                  "fusio-project",
                  "org"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "b6ad7273-fde5-431a-b831-8f996e72e42d",
        "name": "Get Books",
        "item": [
          {
            "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
            "name": "Get All Books",
            "request": {
              "url": {
                "path": [
                  "books"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Verify that id is equal to 4\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData[2].id).to.eql(4);",
                    "});",
                    "",
                    "",
                    "pm.test(\"Verify that name is equal to The Vanishing Half\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");",
                    "});"
                  ],
                  "_lastExecutionId": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
            "name": "Get Books by ID",
            "request": {
              "url": {
                "path": [
                  "books",
                  ":bookId"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "type": "any",
                    "value": "1",
                    "key": "bookId"
                  }
                ]
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Test for status code\r",
                    "pm.test(\"Status code is 404\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(404);\r",
                    "});\r",
                    "\r",
                    "// Test for response time\r",
                    "pm.test(\"Response time is less than 1 second\", function () {\r",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                    "});\r",
                    "\r",
                    "// Test for Content-Type header\r",
                    "pm.test(\"Content-Type is application/json\", function () {\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                    "});\r",
                    "\r",
                    "// Parse response body\r",
                    "const response = pm.response.json();\r",
                    "\r",
                    "// Test for response structure\r",
                    "pm.test(\"Response has required fields\", function () {\r",
                    "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                    "});\r",
                    "\r",
                    "// Test for the availability of the 'title' field\r",
                    "pm.test(\"'title' field is present and is a string\", function () {\r",
                    "    pm.expect(response.title).to.exist;\r",
                    "    pm.expect(response.title).to.be.a('string');\r",
                    "});\r",
                    "\r",
                    "// Test for the availability of the 'message' field\r",
                    "pm.test(\"'message' field is present and is a string\", function () {\r",
                    "    pm.expect(response.message).to.exist;\r",
                    "    pm.expect(response.message).to.be.a('string');\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
                }
              }
            ]
          },
          {
            "id": "46ae5b19-54cf-415e-a52d-e79aa23144fb",
            "name": "Get Books by Type",
            "request": {
              "url": {
                "path": [
                  "books"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "type",
                    "value": "fiction"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8f1b944a-9632-44d3-8746-2e0f6c705995",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "const response = pm.response.json();\r",
                    "\r",
                    "// Test for response status code\r",
                    "pm.test(\"Status code is 404\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(404);\r",
                    "});\r",
                    "\r",
                    "// Test for response structure\r",
                    "pm.test(\"Response is an object\", function () {\r",
                    "    pm.expect(response).to.be.an('object');\r",
                    "});\r",
                    "\r",
                    "// Test for expected properties in the response object\r",
                    "pm.test(\"Response contains expected properties\", function () {\r",
                    "    pm.expect(response).to.have.all.keys('success', 'title', 'message');\r",
                    "    pm.expect(response.success).to.be.a('boolean');\r",
                    "    pm.expect(response.title).to.be.a('string');\r",
                    "    pm.expect(response.message).to.be.a('string');\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "963da05c-117a-4c4c-8be5-0511bbf7f724"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "92a4eaa0-7998-41c4-b16c-190d2f1410c8",
        "name": "Place a book order",
        "item": [
          {
            "id": "08ccea66-a79e-45c2-84a7-a96c3eb0806d",
            "name": "Place a book order - using book ID",
            "request": {
              "url": {
                "path": [
                  "orders"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "021b6a0f-e4c8-4286-b5e9-af60862228ad",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Check if the response has the expected content-type header\r",
                    "pm.test(\"Response has Content-Type header\", function () {\r",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
                    "});\r",
                    "\r",
                    ""
                  ],
                  "_lastExecutionId": "57f9199b-c693-4eae-88b2-0e2a5047bfab"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cc55f8bf-2967-4b45-936e-f09e1c51734a",
        "name": "Get an order",
        "item": [
          {
            "id": "8eddb608-e6d3-4d38-9c2f-0b360b7c84ae",
            "name": "Get all orders",
            "request": {
              "url": {
                "path": [
                  "orders"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "60ff8d67-f607-4e8b-8933-97da11127b2a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Summary: Log two response headers to console\r",
                    "var template = `\r",
                    "    <p>Error: ${pm.response.json().message}</p>\r",
                    "    <p>Status code: ${pm.response.code}</p>\r",
                    "`;\r",
                    "\r",
                    "function constructVisualizerPayload() {\r",
                    "    // Log specific response headers to the console\r",
                    "    console.log(\"Response Header 1:\", pm.response.headers.get(\"Server\"));\r",
                    "    console.log(\"Response Header 2:\", pm.response.headers.get(\"Content-Type\"));\r",
                    "\r",
                    "    return {}; // No specific data to return for visualization\r",
                    "}\r",
                    "\r",
                    "pm.visualizer.set(template, constructVisualizerPayload());\r",
                    "\r",
                    "pm.test(\"Response status code is 404\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(404);\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Response content type is application/json\", function () {\r",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Response contains a success field\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData).to.have.property('success');\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Success field is false\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData.success).to.equal(false);\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Response contains an error message field\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData).to.have.property('message');\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Error message is a non-empty string\", function () {\r",
                    "    const responseData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(responseData).to.be.an('object');\r",
                    "    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Error message should not be empty\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "ca235982-47a2-40c1-869d-81be0a362a07"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "a363acbe-c63c-4708-aed2-384b9c1e5ed3",
            "name": "Get an order - using orderID",
            "request": {
              "url": {
                "path": [
                  "orders",
                  ":orderId"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": [
                  {
                    "type": "any",
                    "value": "AaX7WGCUeHH3lRwGRh57M",
                    "key": "orderId"
                  }
                ]
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5f87403c-2582-4178-ba1d-c3185dde09bc",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(404);\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Error message is as expected\", function () {\r",
                    "    const response = pm.response.json();\r",
                    "    pm.expect(response.message).to.equal(\"Unknown location\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "bf4c4755-1c4e-4d62-add4-817530a3174b"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "832e3e01-1163-46c6-9ea5-a3eb59bb608f",
        "name": "Update an order",
        "item": [
          {
            "id": "037c587f-e2fe-4f88-94da-80a50b5e6962",
            "name": "Update an order",
            "request": {
              "url": {
                "path": [
                  "orders",
                  ""
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8f18bd57-e44a-471b-8672-03c50bc915da",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(404);\r",
                    "});\r",
                    "\r",
                    "const response = pm.response.json();\r",
                    "\r",
                    "// Check for the error message in the response\r",
                    "pm.test(\"Error message is present\", function () {\r",
                    "    pm.expect(response.message).to.exist;\r",
                    "    pm.expect(response.message).to.be.a('string');\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "32de2d7e-84f7-4cf4-a4db-986bf79ed1d6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b3835e89-fe81-4f1c-ad02-21dc1edb62c3",
        "name": "Delete an order",
        "item": [
          {
            "id": "2db963ed-d7ba-4530-948d-f9e48239b848",
            "name": "Delete an order",
            "request": {
              "url": {
                "path": [
                  "orders",
                  ":orderId"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": [
                  {
                    "type": "any",
                    "value": "rObASEWYlVrRX6cTAEgbt",
                    "key": "orderId"
                  }
                ]
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4e008749-91fb-4dfc-a203-d1ba4f35c52b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(404);\r",
                    "});\r",
                    "\r",
                    "pm.test(\"Error response structure\", function () {\r",
                    "    const response = pm.response.json();\r",
                    "    pm.expect(response).to.have.property('success', false);\r",
                    "    pm.expect(response).to.have.property('title').that.is.a('string');\r",
                    "    pm.expect(response).to.have.property('message').that.is.a('string');\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "24a77327-b0e8-4307-9992-f247e8c501ac"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "toks"
      },
      {
        "type": "any",
        "value": "",
        "key": "base_url"
      }
    ],
    "info": {
      "_postman_id": "dbbb5b8c-b7d9-498f-b7e9-416c64cf64ff",
      "name": "STSTStudentCourse Copy 4",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "df220d15-e5ba-421f-aa69-c3e2ba44d2f9",
    "values": []
  },
  "globals": {
    "id": "78994bcd-a06f-4638-8eeb-7af0c6cfa5e9",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 10,
        "pending": 0,
        "failed": 4
      },
      "prerequests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 12,
        "pending": 0,
        "failed": 11
      },
      "tests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 19,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 10,
        "pending": 0,
        "failed": 4
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 201.75,
      "responseMin": 807,
      "responseMax": 807,
      "responseSd": 349.441250427021,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756370899081,
      "completed": 1756370900962
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac56cef4-7c3b-4fe9-b083-861474f12825",
          "httpRequestId": "cef92a60-eab8-487c-a9bd-797c65d1fbc6"
        },
        "item": {
          "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verify that title is equal to Fusio\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                  "});",
                  "",
                  "pm.test(\"Verify that payment currency is EUR\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "/*pm.test(\"Verify that the scope has default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.scope).to.eql(\"default\");",
                  "});*/",
                  ""
                ],
                "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "host": [
              "index",
              "php"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8236f489-b42f-406d-9a2e-ed92a9d454b7",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
        "requestError": {},
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Verify that title is equal to Fusio",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Verify that title is equal to Fusio",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Verify that payment currency is EUR",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Verify that payment currency is EUR",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "Verify that the first option under categories is authorization",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Verify that the first option under categories is authorization",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "Verify that the fourth option under categories is default",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "Verify that the fourth option under categories is default",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:5:1)"
            }
          },
          {
            "assertion": "Content-Type is present",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "Content-Type is present",
              "message": "expected response to have header with key 'Content-Type'",
              "stack": "AssertionError: expected response to have header with key 'Content-Type'\n   at Object.eval sandbox-script.js:6:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3b31cfe9-8759-44ac-987c-a411f692af70",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "feda2a0f-f3cc-445b-86a4-4d14ab5eff96"
        },
        "item": {
          "id": "3954226a-5a98-4cef-a3ab-2ccfc56707c3",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "289ca48a-c2b4-43a5-bfdb-fb8b88c9b11d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200); // Check for 200 status code\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Verify response structure\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('apiVersion'); // Check for apiVersion property\r",
                  "    pm.expect(jsonData).to.have.property('title'); // Check for title property\r",
                  "    pm.expect(jsonData).to.have.property('description'); // Check for description property\r",
                  "    pm.expect(jsonData).to.have.property('paymentCurrency'); // Check for paymentCurrency property\r",
                  "    pm.expect(jsonData).to.have.property('categories'); // Check for categories property\r",
                  "    pm.expect(jsonData.categories).to.be.an('array'); // Check if categories is an array\r",
                  "    pm.expect(jsonData).to.have.property('scopes'); // Check for scopes property\r",
                  "    pm.expect(jsonData.scopes).to.be.an('array'); // Check if scopes is an array\r",
                  "    pm.expect(jsonData).to.have.property('links'); // Check for links property\r",
                  "    pm.expect(jsonData.links).to.be.an('array'); // Check if links is an array\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "2fef1223-5b31-4e26-9f24-fd9359ad9c17"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "description": {
            "content": "https://demo.fusio-project.org/index.php/",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "index",
              "php"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "39a0b672-b6b5-45d9-8da3-452f079a2ea4",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "3954226a-5a98-4cef-a3ab-2ccfc56707c3",
        "requestError": {},
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected undefined to equal 200",
              "stack": "AssertionError: expected undefined to equal 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Verify response structure",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Verify response structure",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "85278b52-d945-4582-a155-b964eb77ec18",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b75dbd01-eab8-4b7f-8c19-801222a3e790"
        },
        "item": {
          "id": "8862e6fd-09df-477f-a21a-196b5da50654",
          "name": "Get entry per ID - Valid ID",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "description": {
            "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "host": [
              "index",
              "php"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f97e2822-bf21-475a-92c2-cce1eb9e9b88",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "id": "8862e6fd-09df-477f-a21a-196b5da50654",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "de399267-48b0-4391-9f13-91a55a431a52",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9e03b944-f6c0-4cfc-9ab1-d8c840596513"
        },
        "item": {
          "id": "4b1de347-83ad-4b83-909f-bdd805468d69",
          "name": "Get entry per ID - Invalid ID(params not using TODO ID)",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                ""
              ],
              "host": [
                "demo",
                "fusio-project",
                "org"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "description": {
            "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              ""
            ],
            "host": [
              "demo",
              "fusio-project",
              "org"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1d18e1cf-db67-4a1e-9ba7-047aed5d3275",
              "system": true
            },
            {
              "key": "Host",
              "value": "demo.fusio-project.org",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "de2eaaf5-f9da-484f-9c44-11a5b063ebe4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Thu, 28 Aug 2025 08:48:21 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "1608"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Fusio"
            },
            {
              "key": "x-request-id",
              "value": "584c11ea-a7e5-4f85-9aad-d07023b8ca07"
            },
            {
              "key": "x-operation-id",
              "value": "meta.getAbout"
            },
            {
              "key": "x-stability",
              "value": "stable"
            },
            {
              "key": "ratelimit-limit",
              "value": "900"
            },
            {
              "key": "ratelimit-remaining",
              "value": "900"
            },
            {
              "key": "vary",
              "value": "Accept"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              112,
              105,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              56,
              46,
              53,
              46,
              51,
              46,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              32,
              34,
              70,
              117,
              115,
              105,
              111,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              83,
              101,
              108,
              102,
              45,
              72,
              111,
              115,
              116,
              101,
              100,
              32,
              65,
              80,
              73,
              32,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              66,
              117,
              105,
              108,
              100,
              101,
              114,
              115,
              46,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              97,
              121,
              109,
              101,
              110,
              116,
              67,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              32,
              34,
              69,
              85,
              82,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              105,
              101,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              98,
              97,
              99,
              107,
              101,
              110,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              110,
              115,
              117,
              109,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              121,
              115,
              116,
              101,
              109,
              34,
              10,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              99,
              111,
              112,
              101,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              10,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              108,
              105,
              110,
              107,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              34,
              58,
              32,
              34,
              114,
              111,
              111,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              92,
              47,
              92,
              47,
              100,
              101,
              109,
              111,
              46,
              102,
              117,
              115,
              105,
              111,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              111,
              114,
              103,
              92,
              47,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              34,
              58,
              32,
              34,
              111,
              112,
              101,
              110,
              97,
              112,
              105,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              92,
              47,
              92,
              47,
              100,
              101,
              109,
              111,
              46,
              102,
              117,
              115,
              105,
              111,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              111,
              114,
              103,
              92,
              47,
              115,
              121,
              115,
              116,
              101,
              109,
              92,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              92,
              47,
              115,
              112,
              101,
              99,
              45,
              111,
              112,
              101,
              110,
              97,
              112,
              105,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              34,
              58,
              32,
              34,
              116,
              121,
              112,
              101,
              97,
              112,
              105,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              92,
              47,
              92,
              47,
              100,
              101,
              109,
              111,
              46,
              102,
              117,
              115,
              105,
              111,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              111,
              114,
              103,
              92,
              47,
              115,
              121,
              115,
              116,
              101,
              109,
              92,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              111,
              114,
              92,
              47,
              115,
              112,
              101,
              99,
              45,
              116,
              121,
              112,
              101,
              97,
              112,
              105,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              34,
              58,
              32,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              92,
              47,
              92,
              47,
              100,
              101,
              109,
              111,
              46,
              102,
              117,
              115,
              105,
              111,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              111,
              114,
              103,
              92,
              47,
              115,
              121,
              115,
              116,
              101,
              109,
              92,
              47,
              114,
              111,
              117,
              116,
              101,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              34,
              58,
              32,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              92,
              47,
              92,
              47,
              100,
              101,
              109,
              111,
              46,
              102,
              117,
              115,
              105,
              111,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              111,
              114,
              103,
              92,
              47,
              115,
              121,
              115,
              116,
              101,
              109,
              92,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              34,
              58,
              32,
              34,
              111,
              97,
              117,
              116,
              104,
              45,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              45,
              115,
              101,
              114,
              118,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              92,
              47,
              92,
              47,
              100,
              101,
              109,
              111,
              46,
              102,
              117,
              115,
              105,
              111,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              111,
              114,
              103,
              92,
              47,
              115,
              121,
              115,
              116,
              101,
              109,
              92,
              47,
              111,
              97,
              117,
              116,
              104,
              45,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              45,
              115,
              101,
              114,
              118,
              101,
              114,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              34,
              58,
              32,
              34,
              97,
              112,
              105,
              45,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              92,
              47,
              92,
              47,
              100,
              101,
              109,
              111,
              46,
              102,
              117,
              115,
              105,
              111,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              111,
              114,
              103,
              92,
              47,
              115,
              121,
              115,
              116,
              101,
              109,
              92,
              47,
              97,
              112,
              105,
              45,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              34,
              58,
              32,
              34,
              111,
              97,
              117,
              116,
              104,
              50,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              92,
              47,
              92,
              47,
              100,
              101,
              109,
              111,
              46,
              102,
              117,
              115,
              105,
              111,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              111,
              114,
              103,
              92,
              47,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              92,
              47,
              116,
              111,
              107,
              101,
              110,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              34,
              58,
              32,
              34,
              119,
              104,
              111,
              97,
              109,
              105,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              92,
              47,
              92,
              47,
              100,
              101,
              109,
              111,
              46,
              102,
              117,
              115,
              105,
              111,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              111,
              114,
              103,
              92,
              47,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              92,
              47,
              119,
              104,
              111,
              97,
              109,
              105,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              108,
              34,
              58,
              32,
              34,
              97,
              98,
              111,
              117,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              92,
              47,
              92,
              47,
              119,
              119,
              119,
              46,
              102,
              117,
              115,
              105,
              111,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              111,
              114,
              103,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              93,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 807,
          "responseSize": 1608
        },
        "id": "4b1de347-83ad-4b83-909f-bdd805468d69"
      },
      {
        "cursor": {
          "ref": "1dd07f48-5ffc-49ea-b63a-66890a030be0",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a737b007-bda2-4758-911c-337e214f2a26"
        },
        "item": {
          "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
          "name": "Get All Books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Verify that id is equal to 4\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[2].id).to.eql(4);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Verify that name is equal to The Vanishing Half\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");",
                  "});"
                ],
                "_lastExecutionId": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "host": [
              "books"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8f131d06-1c41-4d85-84fe-4759206fa3ed",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "key": "token"
              }
            ]
          }
        },
        "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
        "requestError": {},
        "assertions": [
          {
            "assertion": "Verify that id is equal to 4",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 0,
              "test": "Verify that id is equal to 4",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Verify that name is equal to The Vanishing Half",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Verify that name is equal to The Vanishing Half",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "eac581ba-dc1d-45c4-80f8-21d8d612c29e",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "884d855b-6198-405e-8333-6c87974dff49"
        },
        "item": {
          "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
          "name": "Get Books by ID",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookId"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "type": "any",
                  "value": "1",
                  "key": "bookId"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test for status code\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 1 second\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "// Test for Content-Type header\r",
                  "pm.test(\"Content-Type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "// Parse response body\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Test for response structure\r",
                  "pm.test(\"Response has required fields\", function () {\r",
                  "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                  "});\r",
                  "\r",
                  "// Test for the availability of the 'title' field\r",
                  "pm.test(\"'title' field is present and is a string\", function () {\r",
                  "    pm.expect(response.title).to.exist;\r",
                  "    pm.expect(response.title).to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "// Test for the availability of the 'message' field\r",
                  "pm.test(\"'message' field is present and is a string\", function () {\r",
                  "    pm.expect(response.message).to.exist;\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "1"
            ],
            "host": [
              "books"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2ee3fbae-c889-4ddd-a850-dbe9ff10cb61",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
        "requestError": {},
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected undefined to equal 404",
              "stack": "AssertionError: expected undefined to equal 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response time is less than 1 second",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is less than 1 second",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:6)"
            }
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type is application/json",
              "message": "expected undefined to equal 'application/json'",
              "stack": "AssertionError: expected undefined to equal 'application/json'\n   at Object.eval sandbox-script.js:3:6)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "7881ab72-26ab-4806-8912-1c7892d0712d",
              "timestamp": 1756370900381,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "92730e1d-9f72-40a7-86d7-e72fdaa7575e",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9f7784bb-5f27-4e63-807e-1cb4414171a5"
        },
        "item": {
          "id": "46ae5b19-54cf-415e-a52d-e79aa23144fb",
          "name": "Get Books by Type",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "fiction"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f1b944a-9632-44d3-8746-2e0f6c705995",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Test for response status code\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "// Test for response structure\r",
                  "pm.test(\"Response is an object\", function () {\r",
                  "    pm.expect(response).to.be.an('object');\r",
                  "});\r",
                  "\r",
                  "// Test for expected properties in the response object\r",
                  "pm.test(\"Response contains expected properties\", function () {\r",
                  "    pm.expect(response).to.have.all.keys('success', 'title', 'message');\r",
                  "    pm.expect(response.success).to.be.a('boolean');\r",
                  "    pm.expect(response.title).to.be.a('string');\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "963da05c-117a-4c4c-8be5-0511bbf7f724"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "host": [
              "books"
            ],
            "query": [
              {
                "key": "type",
                "value": "fiction"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b30060b2-0fbe-4bec-ba2a-ad3bf14dc8e4",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "46ae5b19-54cf-415e-a52d-e79aa23144fb",
        "requestError": {},
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "1699a0ea-6518-4a1c-9b9e-67909fdc62eb",
              "timestamp": 1756370900476,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ebeeabf4-9472-4193-8065-96a38b7a206f",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ee7afae0-85ab-4153-b5dc-8a2d28d57c78"
        },
        "item": {
          "id": "08ccea66-a79e-45c2-84a7-a96c3eb0806d",
          "name": "Place a book order - using book ID",
          "request": {
            "url": {
              "path": [
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "021b6a0f-e4c8-4286-b5e9-af60862228ad",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Check if the response has the expected content-type header\r",
                  "pm.test(\"Response has Content-Type header\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "57f9199b-c693-4eae-88b2-0e2a5047bfab"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "host": [
              "orders"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "669b9e55-a03e-44a6-acc0-b5683eeea816",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "key": "token"
              }
            ]
          }
        },
        "id": "08ccea66-a79e-45c2-84a7-a96c3eb0806d",
        "requestError": {},
        "assertions": [
          {
            "assertion": "Response has Content-Type header",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has Content-Type header",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e81cb6ad-b766-4a66-9426-f98e57edb3aa",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f219b12b-bfdf-4619-8e8b-cbb1137b2fcd"
        },
        "item": {
          "id": "8eddb608-e6d3-4d38-9c2f-0b360b7c84ae",
          "name": "Get all orders",
          "request": {
            "url": {
              "path": [
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60ff8d67-f607-4e8b-8933-97da11127b2a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Summary: Log two response headers to console\r",
                  "var template = `\r",
                  "    <p>Error: ${pm.response.json().message}</p>\r",
                  "    <p>Status code: ${pm.response.code}</p>\r",
                  "`;\r",
                  "\r",
                  "function constructVisualizerPayload() {\r",
                  "    // Log specific response headers to the console\r",
                  "    console.log(\"Response Header 1:\", pm.response.headers.get(\"Server\"));\r",
                  "    console.log(\"Response Header 2:\", pm.response.headers.get(\"Content-Type\"));\r",
                  "\r",
                  "    return {}; // No specific data to return for visualization\r",
                  "}\r",
                  "\r",
                  "pm.visualizer.set(template, constructVisualizerPayload());\r",
                  "\r",
                  "pm.test(\"Response status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response content type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains a success field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('success');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Success field is false\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData.success).to.equal(false);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains an error message field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('message');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error message is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Error message should not be empty\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "ca235982-47a2-40c1-869d-81be0a362a07"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "host": [
              "orders"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "61e0810b-a4ce-49cf-93a3-b83db433d1bb",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "key": "token"
              }
            ]
          }
        },
        "id": "8eddb608-e6d3-4d38-9c2f-0b360b7c84ae",
        "requestError": {},
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "c69876c1-0e8b-40d0-a55f-a9977bd7c451",
              "timestamp": 1756370900668,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "df331e2e-bb6e-426d-a6b9-367e4084becc",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9740915e-fb5a-4b17-a5ac-90dce9b3fda9"
        },
        "item": {
          "id": "a363acbe-c63c-4708-aed2-384b9c1e5ed3",
          "name": "Get an order - using orderID",
          "request": {
            "url": {
              "path": [
                "orders",
                ":orderId"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "AaX7WGCUeHH3lRwGRh57M",
                  "key": "orderId"
                }
              ]
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f87403c-2582-4178-ba1d-c3185dde09bc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error message is as expected\", function () {\r",
                  "    const response = pm.response.json();\r",
                  "    pm.expect(response.message).to.equal(\"Unknown location\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "bf4c4755-1c4e-4d62-add4-817530a3174b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "AaX7WGCUeHH3lRwGRh57M"
            ],
            "host": [
              "orders"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f6af21da-18fd-4407-bbec-b23590e5ef74",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "key": "token"
              }
            ]
          }
        },
        "id": "a363acbe-c63c-4708-aed2-384b9c1e5ed3",
        "requestError": {},
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected undefined to equal 404",
              "stack": "AssertionError: expected undefined to equal 404\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Error message is as expected",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Error message is as expected",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "edbd9549-9b1f-4990-8172-b6b5d9c606f9",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "15d64225-3b86-4862-8b4a-ce970a7d724c"
        },
        "item": {
          "id": "037c587f-e2fe-4f88-94da-80a50b5e6962",
          "name": "Update an order",
          "request": {
            "url": {
              "path": [
                "orders",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f18bd57-e44a-471b-8672-03c50bc915da",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Check for the error message in the response\r",
                  "pm.test(\"Error message is present\", function () {\r",
                  "    pm.expect(response.message).to.exist;\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "32de2d7e-84f7-4cf4-a4db-986bf79ed1d6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              ""
            ],
            "host": [
              "orders"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b89afd6d-e21b-445c-be1f-2a0f4e3634ac",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "key": "token"
              }
            ]
          }
        },
        "id": "037c587f-e2fe-4f88-94da-80a50b5e6962",
        "requestError": {},
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected undefined to equal 404",
              "stack": "AssertionError: expected undefined to equal 404\n   at Object.eval sandbox-script.js:1:11)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "78bcb95c-25b6-4a2d-9d8f-0c410d6f1e5a",
              "timestamp": 1756370900839,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "25dde18d-526b-47ea-b7fe-a0bb3ce4fa68",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "72dd4d2e-0e90-4939-ba05-db5a5ad02268"
        },
        "item": {
          "id": "2db963ed-d7ba-4530-948d-f9e48239b848",
          "name": "Delete an order",
          "request": {
            "url": {
              "path": [
                "orders",
                ":orderId"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "rObASEWYlVrRX6cTAEgbt",
                  "key": "orderId"
                }
              ]
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4e008749-91fb-4dfc-a203-d1ba4f35c52b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error response structure\", function () {\r",
                  "    const response = pm.response.json();\r",
                  "    pm.expect(response).to.have.property('success', false);\r",
                  "    pm.expect(response).to.have.property('title').that.is.a('string');\r",
                  "    pm.expect(response).to.have.property('message').that.is.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "24a77327-b0e8-4307-9992-f247e8c501ac"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "rObASEWYlVrRX6cTAEgbt"
            ],
            "host": [
              "orders"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "24d34347-528f-4dcb-b903-af1a067c46e6",
              "system": true
            },
            {
              "key": "Host",
              "value": "",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "key": "token"
              }
            ]
          }
        },
        "id": "2db963ed-d7ba-4530-948d-f9e48239b848",
        "requestError": {},
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected undefined to equal 404",
              "stack": "AssertionError: expected undefined to equal 404\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Error response structure",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Error response structure",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1608
    },
    "failures": [
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///index.php\"",
          "stack": "Error: Invalid URI \"http:///index.php\"\n    at Request.init (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:46:10)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:23\n    at wrapper (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5797:24)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setCertificate (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:74:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5799:13)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setProxy (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:71:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at Object.waterfall (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5802:9)",
          "checksum": "a49b3c1a78592e3fca48a65d9aa0fc91",
          "id": "1007e26f-fc1d-412c-9976-dd24284344e9",
          "timestamp": 1756370899098,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 46,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5797,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 74,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5799,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 71,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5802,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "protocol": "http",
              "host": [
                "index",
                "php"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8236f489-b42f-406d-9a2e-ed92a9d454b7",
                "system": true
              },
              {
                "key": "Host",
                "value": "",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verify that title is equal to Fusio\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                  "});",
                  "",
                  "pm.test(\"Verify that payment currency is EUR\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "/*pm.test(\"Verify that the scope has default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.scope).to.eql(\"default\");",
                  "});*/",
                  ""
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac56cef4-7c3b-4fe9-b083-861474f12825",
          "httpRequestId": "cef92a60-eab8-487c-a9bd-797c65d1fbc6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "8f1a38fbb4708623aafe992d2647a097",
          "id": "bd087ef3-d992-4bbd-9872-920a494845be",
          "timestamp": 1756370899117,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verify that title is equal to Fusio\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                  "});",
                  "",
                  "pm.test(\"Verify that payment currency is EUR\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "/*pm.test(\"Verify that the scope has default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.scope).to.eql(\"default\");",
                  "});*/",
                  ""
                ],
                "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d52b1a-6564-42d0-b98b-fe8a6c08aee5",
          "name": "Get All Todo Entries",
          "item": [
            {
              "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
              "name": "Get All Todo Entries",
              "request": {
                "url": {
                  "path": [
                    "index.php"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Verify that title is equal to Fusio\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                      "});",
                      "",
                      "pm.test(\"Verify that payment currency is EUR\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                      "});",
                      "",
                      "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                      "});",
                      "",
                      "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                      "});",
                      "",
                      "pm.test(\"Content-Type is present\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\");",
                      "});",
                      "",
                      "/*pm.test(\"Verify that the scope has default\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.scope).to.eql(\"default\");",
                      "});*/",
                      ""
                    ],
                    "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac56cef4-7c3b-4fe9-b083-861474f12825",
          "httpRequestId": "cef92a60-eab8-487c-a9bd-797c65d1fbc6",
          "scriptId": "9f217f46-e710-4b1b-a456-2edcd27681bd",
          "execution": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Verify that title is equal to Fusio",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "23b7668977ce85b1b972c97f27d335aa",
          "id": "50784bb4-58ca-4429-9a80-dc30313faf9b",
          "timestamp": 1756370899118,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verify that title is equal to Fusio\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                  "});",
                  "",
                  "pm.test(\"Verify that payment currency is EUR\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "/*pm.test(\"Verify that the scope has default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.scope).to.eql(\"default\");",
                  "});*/",
                  ""
                ],
                "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d52b1a-6564-42d0-b98b-fe8a6c08aee5",
          "name": "Get All Todo Entries",
          "item": [
            {
              "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
              "name": "Get All Todo Entries",
              "request": {
                "url": {
                  "path": [
                    "index.php"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Verify that title is equal to Fusio\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                      "});",
                      "",
                      "pm.test(\"Verify that payment currency is EUR\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                      "});",
                      "",
                      "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                      "});",
                      "",
                      "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                      "});",
                      "",
                      "pm.test(\"Content-Type is present\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\");",
                      "});",
                      "",
                      "/*pm.test(\"Verify that the scope has default\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.scope).to.eql(\"default\");",
                      "});*/",
                      ""
                    ],
                    "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac56cef4-7c3b-4fe9-b083-861474f12825",
          "httpRequestId": "cef92a60-eab8-487c-a9bd-797c65d1fbc6",
          "scriptId": "9f217f46-e710-4b1b-a456-2edcd27681bd",
          "execution": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Verify that payment currency is EUR",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "6ef1b2173c732534953e1fab3bb435d2",
          "id": "97bb2d2b-13ad-4f8d-87c4-1046f0dfdfa3",
          "timestamp": 1756370899119,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verify that title is equal to Fusio\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                  "});",
                  "",
                  "pm.test(\"Verify that payment currency is EUR\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "/*pm.test(\"Verify that the scope has default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.scope).to.eql(\"default\");",
                  "});*/",
                  ""
                ],
                "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d52b1a-6564-42d0-b98b-fe8a6c08aee5",
          "name": "Get All Todo Entries",
          "item": [
            {
              "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
              "name": "Get All Todo Entries",
              "request": {
                "url": {
                  "path": [
                    "index.php"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Verify that title is equal to Fusio\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                      "});",
                      "",
                      "pm.test(\"Verify that payment currency is EUR\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                      "});",
                      "",
                      "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                      "});",
                      "",
                      "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                      "});",
                      "",
                      "pm.test(\"Content-Type is present\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\");",
                      "});",
                      "",
                      "/*pm.test(\"Verify that the scope has default\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.scope).to.eql(\"default\");",
                      "});*/",
                      ""
                    ],
                    "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac56cef4-7c3b-4fe9-b083-861474f12825",
          "httpRequestId": "cef92a60-eab8-487c-a9bd-797c65d1fbc6",
          "scriptId": "9f217f46-e710-4b1b-a456-2edcd27681bd",
          "execution": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Verify that the first option under categories is authorization",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:4:1)",
          "checksum": "0b309e7544654cf8f684608c2a420f54",
          "id": "4a77f9fc-f895-48d3-bffd-d1f786f830d3",
          "timestamp": 1756370899119,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verify that title is equal to Fusio\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                  "});",
                  "",
                  "pm.test(\"Verify that payment currency is EUR\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "/*pm.test(\"Verify that the scope has default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.scope).to.eql(\"default\");",
                  "});*/",
                  ""
                ],
                "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d52b1a-6564-42d0-b98b-fe8a6c08aee5",
          "name": "Get All Todo Entries",
          "item": [
            {
              "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
              "name": "Get All Todo Entries",
              "request": {
                "url": {
                  "path": [
                    "index.php"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Verify that title is equal to Fusio\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                      "});",
                      "",
                      "pm.test(\"Verify that payment currency is EUR\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                      "});",
                      "",
                      "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                      "});",
                      "",
                      "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                      "});",
                      "",
                      "pm.test(\"Content-Type is present\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\");",
                      "});",
                      "",
                      "/*pm.test(\"Verify that the scope has default\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.scope).to.eql(\"default\");",
                      "});*/",
                      ""
                    ],
                    "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac56cef4-7c3b-4fe9-b083-861474f12825",
          "httpRequestId": "cef92a60-eab8-487c-a9bd-797c65d1fbc6",
          "scriptId": "9f217f46-e710-4b1b-a456-2edcd27681bd",
          "execution": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 4,
          "test": "Verify that the fourth option under categories is default",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:5:1)",
          "checksum": "d6fd93a450dbe6de883b6ec4795c7851",
          "id": "dd012318-ab3a-4241-9cc6-00e54cf0a671",
          "timestamp": 1756370899119,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verify that title is equal to Fusio\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                  "});",
                  "",
                  "pm.test(\"Verify that payment currency is EUR\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "/*pm.test(\"Verify that the scope has default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.scope).to.eql(\"default\");",
                  "});*/",
                  ""
                ],
                "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d52b1a-6564-42d0-b98b-fe8a6c08aee5",
          "name": "Get All Todo Entries",
          "item": [
            {
              "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
              "name": "Get All Todo Entries",
              "request": {
                "url": {
                  "path": [
                    "index.php"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Verify that title is equal to Fusio\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                      "});",
                      "",
                      "pm.test(\"Verify that payment currency is EUR\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                      "});",
                      "",
                      "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                      "});",
                      "",
                      "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                      "});",
                      "",
                      "pm.test(\"Content-Type is present\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\");",
                      "});",
                      "",
                      "/*pm.test(\"Verify that the scope has default\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.scope).to.eql(\"default\");",
                      "});*/",
                      ""
                    ],
                    "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac56cef4-7c3b-4fe9-b083-861474f12825",
          "httpRequestId": "cef92a60-eab8-487c-a9bd-797c65d1fbc6",
          "scriptId": "9f217f46-e710-4b1b-a456-2edcd27681bd",
          "execution": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "Content-Type is present",
          "message": "expected response to have header with key 'Content-Type'",
          "stack": "AssertionError: expected response to have header with key 'Content-Type'\n   at Object.eval sandbox-script.js:6:1)",
          "checksum": "29912203aec4bb2c1b8093fe5f68888a",
          "id": "8507af12-a74f-4422-8d4a-f05bcc045523",
          "timestamp": 1756370899120,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
          "name": "Get All Todo Entries",
          "request": {
            "url": {
              "path": [
                "index.php"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Verify that title is equal to Fusio\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                  "});",
                  "",
                  "pm.test(\"Verify that payment currency is EUR\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                  "});",
                  "",
                  "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                  "});",
                  "",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  "/*pm.test(\"Verify that the scope has default\", function () {",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.scope).to.eql(\"default\");",
                  "});*/",
                  ""
                ],
                "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d52b1a-6564-42d0-b98b-fe8a6c08aee5",
          "name": "Get All Todo Entries",
          "item": [
            {
              "id": "06e8333d-cced-4653-981c-b59ebf9a4e5b",
              "name": "Get All Todo Entries",
              "request": {
                "url": {
                  "path": [
                    "index.php"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9f217f46-e710-4b1b-a456-2edcd27681bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Verify that title is equal to Fusio\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.title).to.eql(\"Fusio\");",
                      "});",
                      "",
                      "pm.test(\"Verify that payment currency is EUR\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
                      "});",
                      "",
                      "pm.test(\"Verify that the first option under categories is authorization\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
                      "});",
                      "",
                      "pm.test(\"Verify that the fourth option under categories is default\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
                      "});",
                      "",
                      "pm.test(\"Content-Type is present\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\");",
                      "});",
                      "",
                      "/*pm.test(\"Verify that the scope has default\", function () {",
                      "",
                      "    var jsonData = pm.response.json();",
                      "",
                      "    pm.expect(jsonData.scope).to.eql(\"default\");",
                      "});*/",
                      ""
                    ],
                    "_lastExecutionId": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac56cef4-7c3b-4fe9-b083-861474f12825",
          "httpRequestId": "cef92a60-eab8-487c-a9bd-797c65d1fbc6",
          "scriptId": "9f217f46-e710-4b1b-a456-2edcd27681bd",
          "execution": "abac21ad-6089-48a7-8866-944ccb7ea4e9"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///index.php/\"",
          "stack": "Error: Invalid URI \"http:///index.php/\"\n    at Request.init (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:46:10)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:23\n    at wrapper (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5797:24)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setCertificate (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:74:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5799:13)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setProxy (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:71:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at Object.waterfall (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5802:9)",
          "checksum": "018158d9e48088cd80441c514952275e",
          "id": "e34b3bc0-3373-4eff-94d8-9b0b69c9d458",
          "timestamp": 1756370899202,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 46,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5797,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 74,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5799,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 71,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5802,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3954226a-5a98-4cef-a3ab-2ccfc56707c3",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "index",
                "php"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "39a0b672-b6b5-45d9-8da3-452f079a2ea4",
                "system": true
              },
              {
                "key": "Host",
                "value": "",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "289ca48a-c2b4-43a5-bfdb-fb8b88c9b11d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200); // Check for 200 status code\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Verify response structure\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('apiVersion'); // Check for apiVersion property\r",
                  "    pm.expect(jsonData).to.have.property('title'); // Check for title property\r",
                  "    pm.expect(jsonData).to.have.property('description'); // Check for description property\r",
                  "    pm.expect(jsonData).to.have.property('paymentCurrency'); // Check for paymentCurrency property\r",
                  "    pm.expect(jsonData).to.have.property('categories'); // Check for categories property\r",
                  "    pm.expect(jsonData.categories).to.be.an('array'); // Check if categories is an array\r",
                  "    pm.expect(jsonData).to.have.property('scopes'); // Check for scopes property\r",
                  "    pm.expect(jsonData.scopes).to.be.an('array'); // Check if scopes is an array\r",
                  "    pm.expect(jsonData).to.have.property('links'); // Check for links property\r",
                  "    pm.expect(jsonData.links).to.be.an('array'); // Check if links is an array\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "3b31cfe9-8759-44ac-987c-a411f692af70",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "feda2a0f-f3cc-445b-86a4-4d14ab5eff96"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected undefined to equal 200",
          "stack": "AssertionError: expected undefined to equal 200\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "864600c271af7d84a1633121796822fa",
          "id": "ad1f5326-345b-4630-9de2-cf2e136d6ab9",
          "timestamp": 1756370899222,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3954226a-5a98-4cef-a3ab-2ccfc56707c3",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "289ca48a-c2b4-43a5-bfdb-fb8b88c9b11d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200); // Check for 200 status code\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Verify response structure\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('apiVersion'); // Check for apiVersion property\r",
                  "    pm.expect(jsonData).to.have.property('title'); // Check for title property\r",
                  "    pm.expect(jsonData).to.have.property('description'); // Check for description property\r",
                  "    pm.expect(jsonData).to.have.property('paymentCurrency'); // Check for paymentCurrency property\r",
                  "    pm.expect(jsonData).to.have.property('categories'); // Check for categories property\r",
                  "    pm.expect(jsonData.categories).to.be.an('array'); // Check if categories is an array\r",
                  "    pm.expect(jsonData).to.have.property('scopes'); // Check for scopes property\r",
                  "    pm.expect(jsonData.scopes).to.be.an('array'); // Check if scopes is an array\r",
                  "    pm.expect(jsonData).to.have.property('links'); // Check for links property\r",
                  "    pm.expect(jsonData.links).to.be.an('array'); // Check if links is an array\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "2fef1223-5b31-4e26-9f24-fd9359ad9c17"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "c51956b5-731c-461d-a7bd-929079554f43",
          "name": "Get All Entries",
          "item": [
            {
              "id": "3954226a-5a98-4cef-a3ab-2ccfc56707c3",
              "name": "Get All Entries",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "289ca48a-c2b4-43a5-bfdb-fb8b88c9b11d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200); // Check for 200 status code\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify response structure\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property('apiVersion'); // Check for apiVersion property\r",
                      "    pm.expect(jsonData).to.have.property('title'); // Check for title property\r",
                      "    pm.expect(jsonData).to.have.property('description'); // Check for description property\r",
                      "    pm.expect(jsonData).to.have.property('paymentCurrency'); // Check for paymentCurrency property\r",
                      "    pm.expect(jsonData).to.have.property('categories'); // Check for categories property\r",
                      "    pm.expect(jsonData.categories).to.be.an('array'); // Check if categories is an array\r",
                      "    pm.expect(jsonData).to.have.property('scopes'); // Check for scopes property\r",
                      "    pm.expect(jsonData.scopes).to.be.an('array'); // Check if scopes is an array\r",
                      "    pm.expect(jsonData).to.have.property('links'); // Check for links property\r",
                      "    pm.expect(jsonData.links).to.be.an('array'); // Check if links is an array\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2fef1223-5b31-4e26-9f24-fd9359ad9c17"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3b31cfe9-8759-44ac-987c-a411f692af70",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "feda2a0f-f3cc-445b-86a4-4d14ab5eff96",
          "scriptId": "289ca48a-c2b4-43a5-bfdb-fb8b88c9b11d",
          "execution": "2fef1223-5b31-4e26-9f24-fd9359ad9c17"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Verify response structure",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "6ddbe784c919d26074f2eed601b112b1",
          "id": "d80f54f0-7216-4c68-82f3-98ad5b740332",
          "timestamp": 1756370899223,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3954226a-5a98-4cef-a3ab-2ccfc56707c3",
          "name": "Get All Entries",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "index.php",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "289ca48a-c2b4-43a5-bfdb-fb8b88c9b11d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200); // Check for 200 status code\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Verify response structure\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('apiVersion'); // Check for apiVersion property\r",
                  "    pm.expect(jsonData).to.have.property('title'); // Check for title property\r",
                  "    pm.expect(jsonData).to.have.property('description'); // Check for description property\r",
                  "    pm.expect(jsonData).to.have.property('paymentCurrency'); // Check for paymentCurrency property\r",
                  "    pm.expect(jsonData).to.have.property('categories'); // Check for categories property\r",
                  "    pm.expect(jsonData.categories).to.be.an('array'); // Check if categories is an array\r",
                  "    pm.expect(jsonData).to.have.property('scopes'); // Check for scopes property\r",
                  "    pm.expect(jsonData.scopes).to.be.an('array'); // Check if scopes is an array\r",
                  "    pm.expect(jsonData).to.have.property('links'); // Check for links property\r",
                  "    pm.expect(jsonData.links).to.be.an('array'); // Check if links is an array\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "2fef1223-5b31-4e26-9f24-fd9359ad9c17"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "c51956b5-731c-461d-a7bd-929079554f43",
          "name": "Get All Entries",
          "item": [
            {
              "id": "3954226a-5a98-4cef-a3ab-2ccfc56707c3",
              "name": "Get All Entries",
              "request": {
                "description": {
                  "content": "https://demo.fusio-project.org/index.php/",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "index.php",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "289ca48a-c2b4-43a5-bfdb-fb8b88c9b11d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200); // Check for 200 status code\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify response structure\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property('apiVersion'); // Check for apiVersion property\r",
                      "    pm.expect(jsonData).to.have.property('title'); // Check for title property\r",
                      "    pm.expect(jsonData).to.have.property('description'); // Check for description property\r",
                      "    pm.expect(jsonData).to.have.property('paymentCurrency'); // Check for paymentCurrency property\r",
                      "    pm.expect(jsonData).to.have.property('categories'); // Check for categories property\r",
                      "    pm.expect(jsonData.categories).to.be.an('array'); // Check if categories is an array\r",
                      "    pm.expect(jsonData).to.have.property('scopes'); // Check for scopes property\r",
                      "    pm.expect(jsonData.scopes).to.be.an('array'); // Check if scopes is an array\r",
                      "    pm.expect(jsonData).to.have.property('links'); // Check for links property\r",
                      "    pm.expect(jsonData.links).to.be.an('array'); // Check if links is an array\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2fef1223-5b31-4e26-9f24-fd9359ad9c17"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3b31cfe9-8759-44ac-987c-a411f692af70",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "feda2a0f-f3cc-445b-86a4-4d14ab5eff96",
          "scriptId": "289ca48a-c2b4-43a5-bfdb-fb8b88c9b11d",
          "execution": "2fef1223-5b31-4e26-9f24-fd9359ad9c17"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///index.php\"",
          "stack": "Error: Invalid URI \"http:///index.php\"\n    at Request.init (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:46:10)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:23\n    at wrapper (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5797:24)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setCertificate (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:74:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5799:13)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setProxy (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:71:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at Object.waterfall (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5802:9)",
          "checksum": "a49b3c1a78592e3fca48a65d9aa0fc91",
          "id": "eb2aefc6-b375-4d72-bb05-a252fc239565",
          "timestamp": 1756370899280,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 46,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5797,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 74,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5799,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 71,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5802,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "8862e6fd-09df-477f-a21a-196b5da50654",
          "name": "Get entry per ID - Valid ID",
          "request": {
            "description": {
              "content": "https://demo.fusio-project.org/index.php/todo/:todo_id",
              "type": "text/plain"
            },
            "url": {
              "protocol": "http",
              "host": [
                "index",
                "php"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "f97e2822-bf21-475a-92c2-cce1eb9e9b88",
                "system": true
              },
              {
                "key": "Host",
                "value": "",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "85278b52-d945-4582-a155-b964eb77ec18",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b75dbd01-eab8-4b7f-8c19-801222a3e790"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///books\"",
          "stack": "Error: Invalid URI \"http:///books\"\n    at Request.init (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:46:10)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:23\n    at wrapper (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5797:24)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setCertificate (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:74:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5799:13)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setProxy (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:71:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at Object.waterfall (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5802:9)",
          "checksum": "bccba837da1e04f154d1555de4e4a8d4",
          "id": "e3257877-fc36-428f-ad6a-27591f234a82",
          "timestamp": 1756370900255,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 46,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5797,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 74,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5799,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 71,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5802,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
          "name": "Get All Books",
          "request": {
            "url": {
              "protocol": "http",
              "host": [
                "books"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8f131d06-1c41-4d85-84fe-4759206fa3ed",
                "system": true
              },
              {
                "key": "Host",
                "value": "",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Verify that id is equal to 4\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[2].id).to.eql(4);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Verify that name is equal to The Vanishing Half\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");",
                  "});"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "1dd07f48-5ffc-49ea-b63a-66890a030be0",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a737b007-bda2-4758-911c-337e214f2a26"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 0,
          "test": "Verify that id is equal to 4",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "73c8737d3c327269ddfdefee80d68f25",
          "id": "d9c0e716-4734-42db-bdd5-65cb51824a1f",
          "timestamp": 1756370900273,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
          "name": "Get All Books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Verify that id is equal to 4\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[2].id).to.eql(4);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Verify that name is equal to The Vanishing Half\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");",
                  "});"
                ],
                "_lastExecutionId": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "b6ad7273-fde5-431a-b831-8f996e72e42d",
          "name": "Get Books",
          "item": [
            {
              "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Verify that id is equal to 4\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].id).to.eql(4);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Verify that name is equal to The Vanishing Half\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");",
                      "});"
                    ],
                    "_lastExecutionId": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 1 second\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "\r",
                      "// Test for Content-Type header\r",
                      "pm.test(\"Content-Type is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// Parse response body\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'title' field\r",
                      "pm.test(\"'title' field is present and is a string\", function () {\r",
                      "    pm.expect(response.title).to.exist;\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'message' field\r",
                      "pm.test(\"'message' field is present and is a string\", function () {\r",
                      "    pm.expect(response.message).to.exist;\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
                  }
                }
              ]
            },
            {
              "id": "46ae5b19-54cf-415e-a52d-e79aa23144fb",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f1b944a-9632-44d3-8746-2e0f6c705995",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response is an object\", function () {\r",
                      "    pm.expect(response).to.be.an('object');\r",
                      "});\r",
                      "\r",
                      "// Test for expected properties in the response object\r",
                      "pm.test(\"Response contains expected properties\", function () {\r",
                      "    pm.expect(response).to.have.all.keys('success', 'title', 'message');\r",
                      "    pm.expect(response.success).to.be.a('boolean');\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "963da05c-117a-4c4c-8be5-0511bbf7f724"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1dd07f48-5ffc-49ea-b63a-66890a030be0",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a737b007-bda2-4758-911c-337e214f2a26",
          "scriptId": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
          "execution": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Verify that name is equal to The Vanishing Half",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "83ea06db3e98fd0b28884cec3e4bd3b4",
          "id": "a4a282f4-f542-44ac-af08-edfbf21d36e3",
          "timestamp": 1756370900274,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
          "name": "Get All Books",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Verify that id is equal to 4\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[2].id).to.eql(4);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Verify that name is equal to The Vanishing Half\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");",
                  "});"
                ],
                "_lastExecutionId": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "b6ad7273-fde5-431a-b831-8f996e72e42d",
          "name": "Get Books",
          "item": [
            {
              "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Verify that id is equal to 4\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].id).to.eql(4);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Verify that name is equal to The Vanishing Half\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");",
                      "});"
                    ],
                    "_lastExecutionId": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 1 second\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "\r",
                      "// Test for Content-Type header\r",
                      "pm.test(\"Content-Type is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// Parse response body\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'title' field\r",
                      "pm.test(\"'title' field is present and is a string\", function () {\r",
                      "    pm.expect(response.title).to.exist;\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'message' field\r",
                      "pm.test(\"'message' field is present and is a string\", function () {\r",
                      "    pm.expect(response.message).to.exist;\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
                  }
                }
              ]
            },
            {
              "id": "46ae5b19-54cf-415e-a52d-e79aa23144fb",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f1b944a-9632-44d3-8746-2e0f6c705995",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response is an object\", function () {\r",
                      "    pm.expect(response).to.be.an('object');\r",
                      "});\r",
                      "\r",
                      "// Test for expected properties in the response object\r",
                      "pm.test(\"Response contains expected properties\", function () {\r",
                      "    pm.expect(response).to.have.all.keys('success', 'title', 'message');\r",
                      "    pm.expect(response.success).to.be.a('boolean');\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "963da05c-117a-4c4c-8be5-0511bbf7f724"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1dd07f48-5ffc-49ea-b63a-66890a030be0",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a737b007-bda2-4758-911c-337e214f2a26",
          "scriptId": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
          "execution": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///books/1\"",
          "stack": "Error: Invalid URI \"http:///books/1\"\n    at Request.init (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:46:10)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:23\n    at wrapper (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5797:24)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setCertificate (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:74:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5799:13)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setProxy (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:71:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at Object.waterfall (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5802:9)",
          "checksum": "ff7891d4e3f0c95900ec3c9f67baabdf",
          "id": "fad2d9df-5b57-4f01-b9e8-840a767fa96b",
          "timestamp": 1756370900348,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 46,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5797,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 74,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5799,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 71,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5802,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
          "name": "Get Books by ID",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "1"
              ],
              "host": [
                "books"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "2ee3fbae-c889-4ddd-a850-dbe9ff10cb61",
                "system": true
              },
              {
                "key": "Host",
                "value": "",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test for status code\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 1 second\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "// Test for Content-Type header\r",
                  "pm.test(\"Content-Type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "// Parse response body\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Test for response structure\r",
                  "pm.test(\"Response has required fields\", function () {\r",
                  "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                  "});\r",
                  "\r",
                  "// Test for the availability of the 'title' field\r",
                  "pm.test(\"'title' field is present and is a string\", function () {\r",
                  "    pm.expect(response.title).to.exist;\r",
                  "    pm.expect(response.title).to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "// Test for the availability of the 'message' field\r",
                  "pm.test(\"'message' field is present and is a string\", function () {\r",
                  "    pm.expect(response.message).to.exist;\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "eac581ba-dc1d-45c4-80f8-21d8d612c29e",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "884d855b-6198-405e-8333-6c87974dff49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected undefined to equal 404",
          "stack": "AssertionError: expected undefined to equal 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "23f0b63205771df244dac6b055242fb3",
          "id": "f25358a0-9001-4a59-bfff-746b09eb47f7",
          "timestamp": 1756370900378,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
          "name": "Get Books by ID",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookId"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "type": "any",
                  "value": "1",
                  "key": "bookId"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test for status code\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 1 second\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "// Test for Content-Type header\r",
                  "pm.test(\"Content-Type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "// Parse response body\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Test for response structure\r",
                  "pm.test(\"Response has required fields\", function () {\r",
                  "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                  "});\r",
                  "\r",
                  "// Test for the availability of the 'title' field\r",
                  "pm.test(\"'title' field is present and is a string\", function () {\r",
                  "    pm.expect(response.title).to.exist;\r",
                  "    pm.expect(response.title).to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "// Test for the availability of the 'message' field\r",
                  "pm.test(\"'message' field is present and is a string\", function () {\r",
                  "    pm.expect(response.message).to.exist;\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
              }
            }
          ]
        },
        "parent": {
          "id": "b6ad7273-fde5-431a-b831-8f996e72e42d",
          "name": "Get Books",
          "item": [
            {
              "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Verify that id is equal to 4\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].id).to.eql(4);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Verify that name is equal to The Vanishing Half\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");",
                      "});"
                    ],
                    "_lastExecutionId": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 1 second\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "\r",
                      "// Test for Content-Type header\r",
                      "pm.test(\"Content-Type is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// Parse response body\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'title' field\r",
                      "pm.test(\"'title' field is present and is a string\", function () {\r",
                      "    pm.expect(response.title).to.exist;\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'message' field\r",
                      "pm.test(\"'message' field is present and is a string\", function () {\r",
                      "    pm.expect(response.message).to.exist;\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
                  }
                }
              ]
            },
            {
              "id": "46ae5b19-54cf-415e-a52d-e79aa23144fb",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f1b944a-9632-44d3-8746-2e0f6c705995",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response is an object\", function () {\r",
                      "    pm.expect(response).to.be.an('object');\r",
                      "});\r",
                      "\r",
                      "// Test for expected properties in the response object\r",
                      "pm.test(\"Response contains expected properties\", function () {\r",
                      "    pm.expect(response).to.have.all.keys('success', 'title', 'message');\r",
                      "    pm.expect(response.success).to.be.a('boolean');\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "963da05c-117a-4c4c-8be5-0511bbf7f724"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "eac581ba-dc1d-45c4-80f8-21d8d612c29e",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "884d855b-6198-405e-8333-6c87974dff49",
          "scriptId": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
          "execution": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is less than 1 second",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "95fabd0a8d9ae90c4dc6871c9780e23f",
          "id": "89c4b681-2834-40fe-aae0-67926d7a8d09",
          "timestamp": 1756370900379,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
          "name": "Get Books by ID",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookId"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "type": "any",
                  "value": "1",
                  "key": "bookId"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test for status code\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 1 second\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "// Test for Content-Type header\r",
                  "pm.test(\"Content-Type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "// Parse response body\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Test for response structure\r",
                  "pm.test(\"Response has required fields\", function () {\r",
                  "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                  "});\r",
                  "\r",
                  "// Test for the availability of the 'title' field\r",
                  "pm.test(\"'title' field is present and is a string\", function () {\r",
                  "    pm.expect(response.title).to.exist;\r",
                  "    pm.expect(response.title).to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "// Test for the availability of the 'message' field\r",
                  "pm.test(\"'message' field is present and is a string\", function () {\r",
                  "    pm.expect(response.message).to.exist;\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
              }
            }
          ]
        },
        "parent": {
          "id": "b6ad7273-fde5-431a-b831-8f996e72e42d",
          "name": "Get Books",
          "item": [
            {
              "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Verify that id is equal to 4\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].id).to.eql(4);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Verify that name is equal to The Vanishing Half\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");",
                      "});"
                    ],
                    "_lastExecutionId": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 1 second\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "\r",
                      "// Test for Content-Type header\r",
                      "pm.test(\"Content-Type is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// Parse response body\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'title' field\r",
                      "pm.test(\"'title' field is present and is a string\", function () {\r",
                      "    pm.expect(response.title).to.exist;\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'message' field\r",
                      "pm.test(\"'message' field is present and is a string\", function () {\r",
                      "    pm.expect(response.message).to.exist;\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
                  }
                }
              ]
            },
            {
              "id": "46ae5b19-54cf-415e-a52d-e79aa23144fb",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f1b944a-9632-44d3-8746-2e0f6c705995",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response is an object\", function () {\r",
                      "    pm.expect(response).to.be.an('object');\r",
                      "});\r",
                      "\r",
                      "// Test for expected properties in the response object\r",
                      "pm.test(\"Response contains expected properties\", function () {\r",
                      "    pm.expect(response).to.have.all.keys('success', 'title', 'message');\r",
                      "    pm.expect(response.success).to.be.a('boolean');\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "963da05c-117a-4c4c-8be5-0511bbf7f724"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "eac581ba-dc1d-45c4-80f8-21d8d612c29e",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "884d855b-6198-405e-8333-6c87974dff49",
          "scriptId": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
          "execution": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type is application/json",
          "message": "expected undefined to equal 'application/json'",
          "stack": "AssertionError: expected undefined to equal 'application/json'\n   at Object.eval sandbox-script.js:3:6)",
          "checksum": "c9fc2f9a436861867a7ab58e88d2f28b",
          "id": "387a5499-fe00-4ba9-9450-e0e7f56c8b3b",
          "timestamp": 1756370900379,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
          "name": "Get Books by ID",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookId"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "type": "any",
                  "value": "1",
                  "key": "bookId"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test for status code\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 1 second\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "// Test for Content-Type header\r",
                  "pm.test(\"Content-Type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "// Parse response body\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Test for response structure\r",
                  "pm.test(\"Response has required fields\", function () {\r",
                  "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                  "});\r",
                  "\r",
                  "// Test for the availability of the 'title' field\r",
                  "pm.test(\"'title' field is present and is a string\", function () {\r",
                  "    pm.expect(response.title).to.exist;\r",
                  "    pm.expect(response.title).to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "// Test for the availability of the 'message' field\r",
                  "pm.test(\"'message' field is present and is a string\", function () {\r",
                  "    pm.expect(response.message).to.exist;\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
              }
            }
          ]
        },
        "parent": {
          "id": "b6ad7273-fde5-431a-b831-8f996e72e42d",
          "name": "Get Books",
          "item": [
            {
              "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Verify that id is equal to 4\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].id).to.eql(4);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Verify that name is equal to The Vanishing Half\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");",
                      "});"
                    ],
                    "_lastExecutionId": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 1 second\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "\r",
                      "// Test for Content-Type header\r",
                      "pm.test(\"Content-Type is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// Parse response body\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'title' field\r",
                      "pm.test(\"'title' field is present and is a string\", function () {\r",
                      "    pm.expect(response.title).to.exist;\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'message' field\r",
                      "pm.test(\"'message' field is present and is a string\", function () {\r",
                      "    pm.expect(response.message).to.exist;\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
                  }
                }
              ]
            },
            {
              "id": "46ae5b19-54cf-415e-a52d-e79aa23144fb",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f1b944a-9632-44d3-8746-2e0f6c705995",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response is an object\", function () {\r",
                      "    pm.expect(response).to.be.an('object');\r",
                      "});\r",
                      "\r",
                      "// Test for expected properties in the response object\r",
                      "pm.test(\"Response contains expected properties\", function () {\r",
                      "    pm.expect(response).to.have.all.keys('success', 'title', 'message');\r",
                      "    pm.expect(response.success).to.be.a('boolean');\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "963da05c-117a-4c4c-8be5-0511bbf7f724"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "eac581ba-dc1d-45c4-80f8-21d8d612c29e",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "884d855b-6198-405e-8333-6c87974dff49",
          "scriptId": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
          "execution": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "7881ab72-26ab-4806-8912-1c7892d0712d",
          "timestamp": 1756370900381,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
          "name": "Get Books by ID",
          "request": {
            "url": {
              "path": [
                "books",
                ":bookId"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "type": "any",
                  "value": "1",
                  "key": "bookId"
                }
              ]
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test for status code\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 1 second\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "// Test for Content-Type header\r",
                  "pm.test(\"Content-Type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "// Parse response body\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Test for response structure\r",
                  "pm.test(\"Response has required fields\", function () {\r",
                  "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                  "});\r",
                  "\r",
                  "// Test for the availability of the 'title' field\r",
                  "pm.test(\"'title' field is present and is a string\", function () {\r",
                  "    pm.expect(response.title).to.exist;\r",
                  "    pm.expect(response.title).to.be.a('string');\r",
                  "});\r",
                  "\r",
                  "// Test for the availability of the 'message' field\r",
                  "pm.test(\"'message' field is present and is a string\", function () {\r",
                  "    pm.expect(response.message).to.exist;\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
              }
            }
          ]
        },
        "parent": {
          "id": "b6ad7273-fde5-431a-b831-8f996e72e42d",
          "name": "Get Books",
          "item": [
            {
              "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Verify that id is equal to 4\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].id).to.eql(4);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Verify that name is equal to The Vanishing Half\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");",
                      "});"
                    ],
                    "_lastExecutionId": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 1 second\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "\r",
                      "// Test for Content-Type header\r",
                      "pm.test(\"Content-Type is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// Parse response body\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'title' field\r",
                      "pm.test(\"'title' field is present and is a string\", function () {\r",
                      "    pm.expect(response.title).to.exist;\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'message' field\r",
                      "pm.test(\"'message' field is present and is a string\", function () {\r",
                      "    pm.expect(response.message).to.exist;\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
                  }
                }
              ]
            },
            {
              "id": "46ae5b19-54cf-415e-a52d-e79aa23144fb",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f1b944a-9632-44d3-8746-2e0f6c705995",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response is an object\", function () {\r",
                      "    pm.expect(response).to.be.an('object');\r",
                      "});\r",
                      "\r",
                      "// Test for expected properties in the response object\r",
                      "pm.test(\"Response contains expected properties\", function () {\r",
                      "    pm.expect(response).to.have.all.keys('success', 'title', 'message');\r",
                      "    pm.expect(response.success).to.be.a('boolean');\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "963da05c-117a-4c4c-8be5-0511bbf7f724"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "eac581ba-dc1d-45c4-80f8-21d8d612c29e",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "884d855b-6198-405e-8333-6c87974dff49",
          "scriptId": "2f52276d-c298-4ded-bf7b-0b090d8a0445"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///books?type=fiction\"",
          "stack": "Error: Invalid URI \"http:///books?type=fiction\"\n    at Request.init (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:46:10)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:23\n    at wrapper (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5797:24)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setCertificate (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:74:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5799:13)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setProxy (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:71:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at Object.waterfall (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5802:9)",
          "checksum": "eb901a25fbb3fb4647ff81f6e1aebeca",
          "id": "c9b7bd54-2e72-45c2-b6ef-be57d772a29a",
          "timestamp": 1756370900456,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 46,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5797,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 74,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5799,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 71,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5802,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "46ae5b19-54cf-415e-a52d-e79aa23144fb",
          "name": "Get Books by Type",
          "request": {
            "url": {
              "protocol": "http",
              "host": [
                "books"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "fiction"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "b30060b2-0fbe-4bec-ba2a-ad3bf14dc8e4",
                "system": true
              },
              {
                "key": "Host",
                "value": "",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f1b944a-9632-44d3-8746-2e0f6c705995",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Test for response status code\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "// Test for response structure\r",
                  "pm.test(\"Response is an object\", function () {\r",
                  "    pm.expect(response).to.be.an('object');\r",
                  "});\r",
                  "\r",
                  "// Test for expected properties in the response object\r",
                  "pm.test(\"Response contains expected properties\", function () {\r",
                  "    pm.expect(response).to.have.all.keys('success', 'title', 'message');\r",
                  "    pm.expect(response.success).to.be.a('boolean');\r",
                  "    pm.expect(response.title).to.be.a('string');\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "92730e1d-9f72-40a7-86d7-e72fdaa7575e",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9f7784bb-5f27-4e63-807e-1cb4414171a5"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "1699a0ea-6518-4a1c-9b9e-67909fdc62eb",
          "timestamp": 1756370900476,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "46ae5b19-54cf-415e-a52d-e79aa23144fb",
          "name": "Get Books by Type",
          "request": {
            "url": {
              "path": [
                "books"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "fiction"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f1b944a-9632-44d3-8746-2e0f6c705995",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Test for response status code\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "// Test for response structure\r",
                  "pm.test(\"Response is an object\", function () {\r",
                  "    pm.expect(response).to.be.an('object');\r",
                  "});\r",
                  "\r",
                  "// Test for expected properties in the response object\r",
                  "pm.test(\"Response contains expected properties\", function () {\r",
                  "    pm.expect(response).to.have.all.keys('success', 'title', 'message');\r",
                  "    pm.expect(response.success).to.be.a('boolean');\r",
                  "    pm.expect(response.title).to.be.a('string');\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "963da05c-117a-4c4c-8be5-0511bbf7f724"
              }
            }
          ]
        },
        "parent": {
          "id": "b6ad7273-fde5-431a-b831-8f996e72e42d",
          "name": "Get Books",
          "item": [
            {
              "id": "cddf8a7d-1e9c-4aa7-a01a-c8e5ad5598a4",
              "name": "Get All Books",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c8ecd4f-e3c6-424e-9ebe-3b22a69b6ca9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Verify that id is equal to 4\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].id).to.eql(4);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Verify that name is equal to The Vanishing Half\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");",
                      "});"
                    ],
                    "_lastExecutionId": "f5579d87-037d-4c2c-8e8d-6ea29802b359"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "fe307fc5-243b-489e-9e1a-344a2591298c",
              "name": "Get Books by ID",
              "request": {
                "url": {
                  "path": [
                    "books",
                    ":bookId"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "1",
                      "key": "bookId"
                    }
                  ]
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f52276d-c298-4ded-bf7b-0b090d8a0445",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 1 second\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "\r",
                      "// Test for Content-Type header\r",
                      "pm.test(\"Content-Type is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// Parse response body\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response has required fields\", function () {\r",
                      "    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'title' field\r",
                      "pm.test(\"'title' field is present and is a string\", function () {\r",
                      "    pm.expect(response.title).to.exist;\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "// Test for the availability of the 'message' field\r",
                      "pm.test(\"'message' field is present and is a string\", function () {\r",
                      "    pm.expect(response.message).to.exist;\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "db313f6c-2ce5-4d67-bc9b-9a2d9a3e4a1f"
                  }
                }
              ]
            },
            {
              "id": "46ae5b19-54cf-415e-a52d-e79aa23144fb",
              "name": "Get Books by Type",
              "request": {
                "url": {
                  "path": [
                    "books"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "fiction"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f1b944a-9632-44d3-8746-2e0f6c705995",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Test for response status code\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "// Test for response structure\r",
                      "pm.test(\"Response is an object\", function () {\r",
                      "    pm.expect(response).to.be.an('object');\r",
                      "});\r",
                      "\r",
                      "// Test for expected properties in the response object\r",
                      "pm.test(\"Response contains expected properties\", function () {\r",
                      "    pm.expect(response).to.have.all.keys('success', 'title', 'message');\r",
                      "    pm.expect(response.success).to.be.a('boolean');\r",
                      "    pm.expect(response.title).to.be.a('string');\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "963da05c-117a-4c4c-8be5-0511bbf7f724"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "92730e1d-9f72-40a7-86d7-e72fdaa7575e",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9f7784bb-5f27-4e63-807e-1cb4414171a5",
          "scriptId": "8f1b944a-9632-44d3-8746-2e0f6c705995"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///orders\"",
          "stack": "Error: Invalid URI \"http:///orders\"\n    at Request.init (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:46:10)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:23\n    at wrapper (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5797:24)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setCertificate (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:74:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5799:13)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setProxy (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:71:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at Object.waterfall (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5802:9)",
          "checksum": "b8394f859341110241ea0b8cca02df3c",
          "id": "9edcac3a-7acc-498b-90cd-a6ddf8914ab2",
          "timestamp": 1756370900552,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 46,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5797,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 74,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5799,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 71,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5802,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "08ccea66-a79e-45c2-84a7-a96c3eb0806d",
          "name": "Place a book order - using book ID",
          "request": {
            "url": {
              "protocol": "http",
              "host": [
                "orders"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "Authorization",
                "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "669b9e55-a03e-44a6-acc0-b5683eeea816",
                "system": true
              },
              {
                "key": "Host",
                "value": "",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "021b6a0f-e4c8-4286-b5e9-af60862228ad",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Check if the response has the expected content-type header\r",
                  "pm.test(\"Response has Content-Type header\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ebeeabf4-9472-4193-8065-96a38b7a206f",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ee7afae0-85ab-4153-b5dc-8a2d28d57c78"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has Content-Type header",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "b229d28a64abd278ed19246c7954c3d8",
          "id": "619ecf65-f12d-4894-b82e-8802969d0e40",
          "timestamp": 1756370900572,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "08ccea66-a79e-45c2-84a7-a96c3eb0806d",
          "name": "Place a book order - using book ID",
          "request": {
            "url": {
              "path": [
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "021b6a0f-e4c8-4286-b5e9-af60862228ad",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Check if the response has the expected content-type header\r",
                  "pm.test(\"Response has Content-Type header\", function () {\r",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "57f9199b-c693-4eae-88b2-0e2a5047bfab"
              }
            }
          ]
        },
        "parent": {
          "id": "92a4eaa0-7998-41c4-b16c-190d2f1410c8",
          "name": "Place a book order",
          "item": [
            {
              "id": "08ccea66-a79e-45c2-84a7-a96c3eb0806d",
              "name": "Place a book order - using book ID",
              "request": {
                "url": {
                  "path": [
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "021b6a0f-e4c8-4286-b5e9-af60862228ad",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Check if the response has the expected content-type header\r",
                      "pm.test(\"Response has Content-Type header\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "57f9199b-c693-4eae-88b2-0e2a5047bfab"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ebeeabf4-9472-4193-8065-96a38b7a206f",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ee7afae0-85ab-4153-b5dc-8a2d28d57c78",
          "scriptId": "021b6a0f-e4c8-4286-b5e9-af60862228ad",
          "execution": "57f9199b-c693-4eae-88b2-0e2a5047bfab"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///orders\"",
          "stack": "Error: Invalid URI \"http:///orders\"\n    at Request.init (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:46:10)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:23\n    at wrapper (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5797:24)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setCertificate (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:74:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5799:13)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setProxy (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:71:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at Object.waterfall (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5802:9)",
          "checksum": "b8394f859341110241ea0b8cca02df3c",
          "id": "5b7c8b2c-2678-4181-81db-6ef11b6cb3a5",
          "timestamp": 1756370900646,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 46,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5797,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 74,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5799,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 71,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5802,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "8eddb608-e6d3-4d38-9c2f-0b360b7c84ae",
          "name": "Get all orders",
          "request": {
            "url": {
              "protocol": "http",
              "host": [
                "orders"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "61e0810b-a4ce-49cf-93a3-b83db433d1bb",
                "system": true
              },
              {
                "key": "Host",
                "value": "",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60ff8d67-f607-4e8b-8933-97da11127b2a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Summary: Log two response headers to console\r",
                  "var template = `\r",
                  "    <p>Error: ${pm.response.json().message}</p>\r",
                  "    <p>Status code: ${pm.response.code}</p>\r",
                  "`;\r",
                  "\r",
                  "function constructVisualizerPayload() {\r",
                  "    // Log specific response headers to the console\r",
                  "    console.log(\"Response Header 1:\", pm.response.headers.get(\"Server\"));\r",
                  "    console.log(\"Response Header 2:\", pm.response.headers.get(\"Content-Type\"));\r",
                  "\r",
                  "    return {}; // No specific data to return for visualization\r",
                  "}\r",
                  "\r",
                  "pm.visualizer.set(template, constructVisualizerPayload());\r",
                  "\r",
                  "pm.test(\"Response status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response content type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains a success field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('success');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Success field is false\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData.success).to.equal(false);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains an error message field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('message');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error message is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Error message should not be empty\");\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "e81cb6ad-b766-4a66-9426-f98e57edb3aa",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f219b12b-bfdf-4619-8e8b-cbb1137b2fcd"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "c69876c1-0e8b-40d0-a55f-a9977bd7c451",
          "timestamp": 1756370900668,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "8eddb608-e6d3-4d38-9c2f-0b360b7c84ae",
          "name": "Get all orders",
          "request": {
            "url": {
              "path": [
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60ff8d67-f607-4e8b-8933-97da11127b2a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Summary: Log two response headers to console\r",
                  "var template = `\r",
                  "    <p>Error: ${pm.response.json().message}</p>\r",
                  "    <p>Status code: ${pm.response.code}</p>\r",
                  "`;\r",
                  "\r",
                  "function constructVisualizerPayload() {\r",
                  "    // Log specific response headers to the console\r",
                  "    console.log(\"Response Header 1:\", pm.response.headers.get(\"Server\"));\r",
                  "    console.log(\"Response Header 2:\", pm.response.headers.get(\"Content-Type\"));\r",
                  "\r",
                  "    return {}; // No specific data to return for visualization\r",
                  "}\r",
                  "\r",
                  "pm.visualizer.set(template, constructVisualizerPayload());\r",
                  "\r",
                  "pm.test(\"Response status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response content type is application/json\", function () {\r",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains a success field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('success');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Success field is false\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData.success).to.equal(false);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains an error message field\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData).to.have.property('message');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error message is a non-empty string\", function () {\r",
                  "    const responseData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(responseData).to.be.an('object');\r",
                  "    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Error message should not be empty\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "ca235982-47a2-40c1-869d-81be0a362a07"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "cc55f8bf-2967-4b45-936e-f09e1c51734a",
          "name": "Get an order",
          "item": [
            {
              "id": "8eddb608-e6d3-4d38-9c2f-0b360b7c84ae",
              "name": "Get all orders",
              "request": {
                "url": {
                  "path": [
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60ff8d67-f607-4e8b-8933-97da11127b2a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Summary: Log two response headers to console\r",
                      "var template = `\r",
                      "    <p>Error: ${pm.response.json().message}</p>\r",
                      "    <p>Status code: ${pm.response.code}</p>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    // Log specific response headers to the console\r",
                      "    console.log(\"Response Header 1:\", pm.response.headers.get(\"Server\"));\r",
                      "    console.log(\"Response Header 2:\", pm.response.headers.get(\"Content-Type\"));\r",
                      "\r",
                      "    return {}; // No specific data to return for visualization\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());\r",
                      "\r",
                      "pm.test(\"Response status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response content type is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response contains a success field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('success');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Success field is false\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData.success).to.equal(false);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response contains an error message field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('message');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error message is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Error message should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ca235982-47a2-40c1-869d-81be0a362a07"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "a363acbe-c63c-4708-aed2-384b9c1e5ed3",
              "name": "Get an order - using orderID",
              "request": {
                "url": {
                  "path": [
                    "orders",
                    ":orderId"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "AaX7WGCUeHH3lRwGRh57M",
                      "key": "orderId"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f87403c-2582-4178-ba1d-c3185dde09bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error message is as expected\", function () {\r",
                      "    const response = pm.response.json();\r",
                      "    pm.expect(response.message).to.equal(\"Unknown location\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "bf4c4755-1c4e-4d62-add4-817530a3174b"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e81cb6ad-b766-4a66-9426-f98e57edb3aa",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f219b12b-bfdf-4619-8e8b-cbb1137b2fcd",
          "scriptId": "60ff8d67-f607-4e8b-8933-97da11127b2a"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///orders/AaX7WGCUeHH3lRwGRh57M\"",
          "stack": "Error: Invalid URI \"http:///orders/AaX7WGCUeHH3lRwGRh57M\"\n    at Request.init (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:46:10)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:23\n    at wrapper (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5797:24)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setCertificate (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:74:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5799:13)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setProxy (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:71:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at Object.waterfall (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5802:9)",
          "checksum": "0926ae3291286e99e0e70c63f2409b64",
          "id": "9f5fdedf-0025-4542-9af3-b35650ed6456",
          "timestamp": 1756370900726,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 46,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5797,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 74,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5799,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 71,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5802,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "a363acbe-c63c-4708-aed2-384b9c1e5ed3",
          "name": "Get an order - using orderID",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "AaX7WGCUeHH3lRwGRh57M"
              ],
              "host": [
                "orders"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "f6af21da-18fd-4407-bbec-b23590e5ef74",
                "system": true
              },
              {
                "key": "Host",
                "value": "",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f87403c-2582-4178-ba1d-c3185dde09bc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error message is as expected\", function () {\r",
                  "    const response = pm.response.json();\r",
                  "    pm.expect(response.message).to.equal(\"Unknown location\");\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "ref": "df331e2e-bb6e-426d-a6b9-367e4084becc",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9740915e-fb5a-4b17-a5ac-90dce9b3fda9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected undefined to equal 404",
          "stack": "AssertionError: expected undefined to equal 404\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "dc24811da904f5ba164ede3e3e3f268c",
          "id": "f50d2dcc-6833-445a-8b40-e2dfaa1bd51e",
          "timestamp": 1756370900744,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a363acbe-c63c-4708-aed2-384b9c1e5ed3",
          "name": "Get an order - using orderID",
          "request": {
            "url": {
              "path": [
                "orders",
                ":orderId"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "AaX7WGCUeHH3lRwGRh57M",
                  "key": "orderId"
                }
              ]
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f87403c-2582-4178-ba1d-c3185dde09bc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error message is as expected\", function () {\r",
                  "    const response = pm.response.json();\r",
                  "    pm.expect(response.message).to.equal(\"Unknown location\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "bf4c4755-1c4e-4d62-add4-817530a3174b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "cc55f8bf-2967-4b45-936e-f09e1c51734a",
          "name": "Get an order",
          "item": [
            {
              "id": "8eddb608-e6d3-4d38-9c2f-0b360b7c84ae",
              "name": "Get all orders",
              "request": {
                "url": {
                  "path": [
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60ff8d67-f607-4e8b-8933-97da11127b2a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Summary: Log two response headers to console\r",
                      "var template = `\r",
                      "    <p>Error: ${pm.response.json().message}</p>\r",
                      "    <p>Status code: ${pm.response.code}</p>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    // Log specific response headers to the console\r",
                      "    console.log(\"Response Header 1:\", pm.response.headers.get(\"Server\"));\r",
                      "    console.log(\"Response Header 2:\", pm.response.headers.get(\"Content-Type\"));\r",
                      "\r",
                      "    return {}; // No specific data to return for visualization\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());\r",
                      "\r",
                      "pm.test(\"Response status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response content type is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response contains a success field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('success');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Success field is false\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData.success).to.equal(false);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response contains an error message field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('message');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error message is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Error message should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ca235982-47a2-40c1-869d-81be0a362a07"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "a363acbe-c63c-4708-aed2-384b9c1e5ed3",
              "name": "Get an order - using orderID",
              "request": {
                "url": {
                  "path": [
                    "orders",
                    ":orderId"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "AaX7WGCUeHH3lRwGRh57M",
                      "key": "orderId"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f87403c-2582-4178-ba1d-c3185dde09bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error message is as expected\", function () {\r",
                      "    const response = pm.response.json();\r",
                      "    pm.expect(response.message).to.equal(\"Unknown location\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "bf4c4755-1c4e-4d62-add4-817530a3174b"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "df331e2e-bb6e-426d-a6b9-367e4084becc",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9740915e-fb5a-4b17-a5ac-90dce9b3fda9",
          "scriptId": "5f87403c-2582-4178-ba1d-c3185dde09bc",
          "execution": "bf4c4755-1c4e-4d62-add4-817530a3174b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Error message is as expected",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "55abe61fcda11b5b6989aed71b61b931",
          "id": "06244c23-7aa7-4d24-b95f-839e28bca8a2",
          "timestamp": 1756370900744,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a363acbe-c63c-4708-aed2-384b9c1e5ed3",
          "name": "Get an order - using orderID",
          "request": {
            "url": {
              "path": [
                "orders",
                ":orderId"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "AaX7WGCUeHH3lRwGRh57M",
                  "key": "orderId"
                }
              ]
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f87403c-2582-4178-ba1d-c3185dde09bc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error message is as expected\", function () {\r",
                  "    const response = pm.response.json();\r",
                  "    pm.expect(response.message).to.equal(\"Unknown location\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "bf4c4755-1c4e-4d62-add4-817530a3174b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "cc55f8bf-2967-4b45-936e-f09e1c51734a",
          "name": "Get an order",
          "item": [
            {
              "id": "8eddb608-e6d3-4d38-9c2f-0b360b7c84ae",
              "name": "Get all orders",
              "request": {
                "url": {
                  "path": [
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60ff8d67-f607-4e8b-8933-97da11127b2a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Summary: Log two response headers to console\r",
                      "var template = `\r",
                      "    <p>Error: ${pm.response.json().message}</p>\r",
                      "    <p>Status code: ${pm.response.code}</p>\r",
                      "`;\r",
                      "\r",
                      "function constructVisualizerPayload() {\r",
                      "    // Log specific response headers to the console\r",
                      "    console.log(\"Response Header 1:\", pm.response.headers.get(\"Server\"));\r",
                      "    console.log(\"Response Header 2:\", pm.response.headers.get(\"Content-Type\"));\r",
                      "\r",
                      "    return {}; // No specific data to return for visualization\r",
                      "}\r",
                      "\r",
                      "pm.visualizer.set(template, constructVisualizerPayload());\r",
                      "\r",
                      "pm.test(\"Response status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response content type is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response contains a success field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('success');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Success field is false\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData.success).to.equal(false);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response contains an error message field\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData).to.have.property('message');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error message is a non-empty string\", function () {\r",
                      "    const responseData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(responseData).to.be.an('object');\r",
                      "    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Error message should not be empty\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ca235982-47a2-40c1-869d-81be0a362a07"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "a363acbe-c63c-4708-aed2-384b9c1e5ed3",
              "name": "Get an order - using orderID",
              "request": {
                "url": {
                  "path": [
                    "orders",
                    ":orderId"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "AaX7WGCUeHH3lRwGRh57M",
                      "key": "orderId"
                    }
                  ]
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f87403c-2582-4178-ba1d-c3185dde09bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error message is as expected\", function () {\r",
                      "    const response = pm.response.json();\r",
                      "    pm.expect(response.message).to.equal(\"Unknown location\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "bf4c4755-1c4e-4d62-add4-817530a3174b"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "df331e2e-bb6e-426d-a6b9-367e4084becc",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9740915e-fb5a-4b17-a5ac-90dce9b3fda9",
          "scriptId": "5f87403c-2582-4178-ba1d-c3185dde09bc",
          "execution": "bf4c4755-1c4e-4d62-add4-817530a3174b"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///orders/\"",
          "stack": "Error: Invalid URI \"http:///orders/\"\n    at Request.init (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:46:10)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:23\n    at wrapper (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5797:24)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setCertificate (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:74:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5799:13)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setProxy (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:71:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at Object.waterfall (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5802:9)",
          "checksum": "e30743ba8f0dcff3e5b5cfe741ef25ec",
          "id": "656fd340-3bde-4f33-99c4-b59e595aa637",
          "timestamp": 1756370900820,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 46,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5797,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 74,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5799,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 71,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5802,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "037c587f-e2fe-4f88-94da-80a50b5e6962",
          "name": "Update an order",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                ""
              ],
              "host": [
                "orders"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "system": true
              },
              {
                "key": "Authorization",
                "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "b89afd6d-e21b-445c-be1f-2a0f4e3634ac",
                "system": true
              },
              {
                "key": "Host",
                "value": "",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f18bd57-e44a-471b-8672-03c50bc915da",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Check for the error message in the response\r",
                  "pm.test(\"Error message is present\", function () {\r",
                  "    pm.expect(response.message).to.exist;\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "edbd9549-9b1f-4990-8172-b6b5d9c606f9",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "15d64225-3b86-4862-8b4a-ce970a7d724c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected undefined to equal 404",
          "stack": "AssertionError: expected undefined to equal 404\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "57f5441b2a4e63bdc9e4af2754f94fd4",
          "id": "886f7515-19fe-4638-a81a-6e74d3e6e782",
          "timestamp": 1756370900838,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "037c587f-e2fe-4f88-94da-80a50b5e6962",
          "name": "Update an order",
          "request": {
            "url": {
              "path": [
                "orders",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f18bd57-e44a-471b-8672-03c50bc915da",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Check for the error message in the response\r",
                  "pm.test(\"Error message is present\", function () {\r",
                  "    pm.expect(response.message).to.exist;\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "32de2d7e-84f7-4cf4-a4db-986bf79ed1d6"
              }
            }
          ]
        },
        "parent": {
          "id": "832e3e01-1163-46c6-9ea5-a3eb59bb608f",
          "name": "Update an order",
          "item": [
            {
              "id": "037c587f-e2fe-4f88-94da-80a50b5e6962",
              "name": "Update an order",
              "request": {
                "url": {
                  "path": [
                    "orders",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f18bd57-e44a-471b-8672-03c50bc915da",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Check for the error message in the response\r",
                      "pm.test(\"Error message is present\", function () {\r",
                      "    pm.expect(response.message).to.exist;\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "32de2d7e-84f7-4cf4-a4db-986bf79ed1d6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "edbd9549-9b1f-4990-8172-b6b5d9c606f9",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "15d64225-3b86-4862-8b4a-ce970a7d724c",
          "scriptId": "8f18bd57-e44a-471b-8672-03c50bc915da",
          "execution": "32de2d7e-84f7-4cf4-a4db-986bf79ed1d6"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "78bcb95c-25b6-4a2d-9d8f-0c410d6f1e5a",
          "timestamp": 1756370900839,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "037c587f-e2fe-4f88-94da-80a50b5e6962",
          "name": "Update an order",
          "request": {
            "url": {
              "path": [
                "orders",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f18bd57-e44a-471b-8672-03c50bc915da",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "// Check for the error message in the response\r",
                  "pm.test(\"Error message is present\", function () {\r",
                  "    pm.expect(response.message).to.exist;\r",
                  "    pm.expect(response.message).to.be.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "32de2d7e-84f7-4cf4-a4db-986bf79ed1d6"
              }
            }
          ]
        },
        "parent": {
          "id": "832e3e01-1163-46c6-9ea5-a3eb59bb608f",
          "name": "Update an order",
          "item": [
            {
              "id": "037c587f-e2fe-4f88-94da-80a50b5e6962",
              "name": "Update an order",
              "request": {
                "url": {
                  "path": [
                    "orders",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f18bd57-e44a-471b-8672-03c50bc915da",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "// Check for the error message in the response\r",
                      "pm.test(\"Error message is present\", function () {\r",
                      "    pm.expect(response.message).to.exist;\r",
                      "    pm.expect(response.message).to.be.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "32de2d7e-84f7-4cf4-a4db-986bf79ed1d6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "edbd9549-9b1f-4990-8172-b6b5d9c606f9",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "15d64225-3b86-4862-8b4a-ce970a7d724c",
          "scriptId": "8f18bd57-e44a-471b-8672-03c50bc915da"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "Invalid URI \"http:///orders/rObASEWYlVrRX6cTAEgbt\"",
          "stack": "Error: Invalid URI \"http:///orders/rObASEWYlVrRX6cTAEgbt\"\n    at Request.init (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:399:31)\n    at new Request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js:226:8)\n    at request (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js:46:10)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:79:23\n    at wrapper (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5797:24)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setCertificate (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:50:20)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:74:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at next (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5799:13)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:329:20\n    at setProxy (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:31:9)\n    at C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js:71:13\n    at nextTask (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5791:13)\n    at Object.waterfall (C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:5802:9)",
          "checksum": "f881eb4cef439efe3e50b39d300f8377",
          "id": "2409faf1-5518-42ac-91a9-2ea9149a1b1b",
          "timestamp": 1756370900915,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 399,
              "functionName": "Request.init",
              "typeName": "Request",
              "methodName": "init",
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\request.js",
              "lineNumber": 226,
              "functionName": "new Request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-request\\index.js",
              "lineNumber": 46,
              "functionName": "request",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 10,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 79,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 23,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5797,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 24,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 50,
              "functionName": "setCertificate",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 74,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5799,
              "functionName": "next",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 329,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 31,
              "functionName": "setProxy",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 9,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\request-wrapper.js",
              "lineNumber": 71,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5791,
              "functionName": "nextTask",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 5802,
              "functionName": "Object.waterfall",
              "typeName": "Object",
              "methodName": "waterfall",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2db963ed-d7ba-4530-948d-f9e48239b848",
          "name": "Delete an order",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "rObASEWYlVrRX6cTAEgbt"
              ],
              "host": [
                "orders"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer 540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                "system": true
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "24d34347-528f-4dcb-b903-af1a067c46e6",
                "system": true
              },
              {
                "key": "Host",
                "value": "",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4e008749-91fb-4dfc-a203-d1ba4f35c52b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error response structure\", function () {\r",
                  "    const response = pm.response.json();\r",
                  "    pm.expect(response).to.have.property('success', false);\r",
                  "    pm.expect(response).to.have.property('title').that.is.a('string');\r",
                  "    pm.expect(response).to.have.property('message').that.is.a('string');\r",
                  "});\r",
                  ""
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "25dde18d-526b-47ea-b7fe-a0bb3ce4fa68",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "72dd4d2e-0e90-4939-ba05-db5a5ad02268"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected undefined to equal 404",
          "stack": "AssertionError: expected undefined to equal 404\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "daf5df197fae0b7ec160c18b378392b1",
          "id": "94ebe8ff-9538-44fe-9982-bf98205c64ea",
          "timestamp": 1756370900935,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2db963ed-d7ba-4530-948d-f9e48239b848",
          "name": "Delete an order",
          "request": {
            "url": {
              "path": [
                "orders",
                ":orderId"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "rObASEWYlVrRX6cTAEgbt",
                  "key": "orderId"
                }
              ]
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4e008749-91fb-4dfc-a203-d1ba4f35c52b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error response structure\", function () {\r",
                  "    const response = pm.response.json();\r",
                  "    pm.expect(response).to.have.property('success', false);\r",
                  "    pm.expect(response).to.have.property('title').that.is.a('string');\r",
                  "    pm.expect(response).to.have.property('message').that.is.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "24a77327-b0e8-4307-9992-f247e8c501ac"
              }
            }
          ]
        },
        "parent": {
          "id": "b3835e89-fe81-4f1c-ad02-21dc1edb62c3",
          "name": "Delete an order",
          "item": [
            {
              "id": "2db963ed-d7ba-4530-948d-f9e48239b848",
              "name": "Delete an order",
              "request": {
                "url": {
                  "path": [
                    "orders",
                    ":orderId"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "rObASEWYlVrRX6cTAEgbt",
                      "key": "orderId"
                    }
                  ]
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e008749-91fb-4dfc-a203-d1ba4f35c52b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error response structure\", function () {\r",
                      "    const response = pm.response.json();\r",
                      "    pm.expect(response).to.have.property('success', false);\r",
                      "    pm.expect(response).to.have.property('title').that.is.a('string');\r",
                      "    pm.expect(response).to.have.property('message').that.is.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "24a77327-b0e8-4307-9992-f247e8c501ac"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "25dde18d-526b-47ea-b7fe-a0bb3ce4fa68",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "72dd4d2e-0e90-4939-ba05-db5a5ad02268",
          "scriptId": "4e008749-91fb-4dfc-a203-d1ba4f35c52b",
          "execution": "24a77327-b0e8-4307-9992-f247e8c501ac"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Error response structure",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "e1e49978dd695091dffb31faec5f0dac",
          "id": "ead16d6d-d8d0-43bc-a37e-3a139ae44f38",
          "timestamp": 1756370900935,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2db963ed-d7ba-4530-948d-f9e48239b848",
          "name": "Delete an order",
          "request": {
            "url": {
              "path": [
                "orders",
                ":orderId"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "rObASEWYlVrRX6cTAEgbt",
                  "key": "orderId"
                }
              ]
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4e008749-91fb-4dfc-a203-d1ba4f35c52b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error response structure\", function () {\r",
                  "    const response = pm.response.json();\r",
                  "    pm.expect(response).to.have.property('success', false);\r",
                  "    pm.expect(response).to.have.property('title').that.is.a('string');\r",
                  "    pm.expect(response).to.have.property('message').that.is.a('string');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "24a77327-b0e8-4307-9992-f247e8c501ac"
              }
            }
          ]
        },
        "parent": {
          "id": "b3835e89-fe81-4f1c-ad02-21dc1edb62c3",
          "name": "Delete an order",
          "item": [
            {
              "id": "2db963ed-d7ba-4530-948d-f9e48239b848",
              "name": "Delete an order",
              "request": {
                "url": {
                  "path": [
                    "orders",
                    ":orderId"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "rObASEWYlVrRX6cTAEgbt",
                      "key": "orderId"
                    }
                  ]
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e008749-91fb-4dfc-a203-d1ba4f35c52b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(404);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error response structure\", function () {\r",
                      "    const response = pm.response.json();\r",
                      "    pm.expect(response).to.have.property('success', false);\r",
                      "    pm.expect(response).to.have.property('title').that.is.a('string');\r",
                      "    pm.expect(response).to.have.property('message').that.is.a('string');\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "24a77327-b0e8-4307-9992-f247e8c501ac"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "25dde18d-526b-47ea-b7fe-a0bb3ce4fa68",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "72dd4d2e-0e90-4939-ba05-db5a5ad02268",
          "scriptId": "4e008749-91fb-4dfc-a203-d1ba4f35c52b",
          "execution": "24a77327-b0e8-4307-9992-f247e8c501ac"
        }
      }
    ],
    "error": null
  }
}