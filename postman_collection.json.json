{
	"info": {
		"_postman_id": "dbbb5b8c-b7d9-498f-b7e9-416c64cf64ff",
		"name": "STSTStudentCourseCopy4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47309368",
		"_collection_link": "https://fidelisbishop-6183451.postman.co/workspace/954abc98-20c7-4dc2-8bea-498c5829a8cd/collection/47309368-dbbb5b8c-b7d9-498f-b7e9-416c64cf64ff?action=share&source=collection_link&creator=47309368"
	},
	"item": [
		{
			"name": "Get All Todo Entries",
			"item": [
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify that title is equal to Fusio\", function () {",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.title).to.eql(\"Fusio\");",
									"});",
									"",
									"pm.test(\"Verify that payment currency is EUR\", function () {",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");",
									"});",
									"",
									"pm.test(\"Verify that the first option under categories is authorization\", function () {",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.categories[0]).to.eql(\"authorization\");",
									"});",
									"",
									"pm.test(\"Verify that the fourth option under categories is default\", function () {",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.categories[3]).to.eql(\"default\");",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"/*pm.test(\"Verify that the scope has default\", function () {",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.scope).to.eql(\"default\");",
									"});*/",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/index.php",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Entries",
			"item": [
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200); // Check for 200 status code\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('apiVersion'); // Check for apiVersion property\r",
									"    pm.expect(jsonData).to.have.property('title'); // Check for title property\r",
									"    pm.expect(jsonData).to.have.property('description'); // Check for description property\r",
									"    pm.expect(jsonData).to.have.property('paymentCurrency'); // Check for paymentCurrency property\r",
									"    pm.expect(jsonData).to.have.property('categories'); // Check for categories property\r",
									"    pm.expect(jsonData.categories).to.be.an('array'); // Check if categories is an array\r",
									"    pm.expect(jsonData).to.have.property('scopes'); // Check for scopes property\r",
									"    pm.expect(jsonData.scopes).to.be.an('array'); // Check if scopes is an array\r",
									"    pm.expect(jsonData).to.have.property('links'); // Check for links property\r",
									"    pm.expect(jsonData.links).to.be.an('array'); // Check if links is an array\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/index.php/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"index.php",
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get entry per ID",
			"item": [
				{
					"name": "Get entry per ID - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches expected title\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.title).to.exist;\r",
									"    pm.expect(response.title).to.be.a('string');\r",
									"    pm.expect(response.title).to.include(\"Fusio\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/index.php",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				},
				{
					"name": "Get entry per ID - Invalid ID(params not using TODO ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"var data1 = [true, false];\r",
									"var data2 = [true, 123];\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    const response = pm.response.json();\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            apiVersion: { type: \"string\" },\r",
									"            title: { type: \"string\" },\r",
									"            description: { type: \"string\" },\r",
									"            paymentCurrency: { type: \"string\" },\r",
									"            categories: { type: \"array\", items: { type: \"string\" } },\r",
									"            scopes: { type: \"array\", items: { type: \"string\" } },\r",
									"            links: { \r",
									"                type: \"array\", \r",
									"                items: { \r",
									"                    type: \"object\", \r",
									"                    properties: {\r",
									"                        rel: { type: \"string\" },\r",
									"                        href: { type: \"string\" }\r",
									"                    },\r",
									"                    required: [\"rel\", \"href\"]\r",
									"                } \r",
									"            }\r",
									"        },\r",
									"        required: [\"apiVersion\", \"title\", \"description\", \"paymentCurrency\", \"categories\", \"scopes\", \"links\"]\r",
									"    };\r",
									"\r",
									"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Authorization header is present\", function () {",
									"    pm.expect(pm.request.headers.get(\"Authorization\")).to.exist;",
									"});",
									"",
									"pm.test(\"Verify User-Agent header is present\", function () {",
									"    pm.expect(pm.request.headers.get(\"User-Agent\")).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 1 second\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Test for Content-Type header\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
									"});\r",
									"\r",
									"// Parse response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for response structure\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    pm.expect(response).to.have.all.keys(\"success\", \"title\", \"message\");\r",
									"});\r",
									"\r",
									"// Test for the availability of the 'title' field\r",
									"pm.test(\"'title' field is present and is a string\", function () {\r",
									"    pm.expect(response.title).to.exist;\r",
									"    pm.expect(response.title).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Test for the availability of the 'message' field\r",
									"pm.test(\"'message' field is present and is a string\", function () {\r",
									"    pm.expect(response.message).to.exist;\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/:bookId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								":bookId"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "bookId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books by Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for response status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"// Test for response structure\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(response).to.be.an('object');\r",
									"});\r",
									"\r",
									"// Test for expected properties in the response object\r",
									"pm.test(\"Response contains expected properties\", function () {\r",
									"    pm.expect(response).to.have.all.keys('success', 'title', 'message');\r",
									"    pm.expect(response.success).to.be.a('boolean');\r",
									"    pm.expect(response.title).to.be.a('string');\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books?type=fiction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place a book order",
			"item": [
				{
					"name": "Place a book order - using book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response has the expected content-type header\r",
									"pm.test(\"Response has Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an order",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Summary: Log two response headers to console\r",
									"var template = `\r",
									"    <p>Error: ${pm.response.json().message}</p>\r",
									"    <p>Status code: ${pm.response.code}</p>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    // Log specific response headers to the console\r",
									"    console.log(\"Response Header 1:\", pm.response.headers.get(\"Server\"));\r",
									"    console.log(\"Response Header 2:\", pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"    return {}; // No specific data to return for visualization\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains a success field\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('success');\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is false\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.success).to.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an error message field\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Error message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using orderID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is as expected\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Unknown location\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "AaX7WGCUeHH3lRwGRh57M"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update an order",
			"item": [
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Check for the error message in the response\r",
									"pm.test(\"Error message is present\", function () {\r",
									"    pm.expect(response.message).to.exist;\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Testify Academy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order",
			"item": [
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error response structure\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('success', false);\r",
									"    pm.expect(response).to.have.property('title').that.is.a('string');\r",
									"    pm.expect(response).to.have.property('message').that.is.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "540bd43cf706368d43ecbfd49df5a059c92c9f3306de459bf39c3a29b96ebfe5",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "rObASEWYlVrRX6cTAEgbt"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "toks",
			"value": "",
			"type": "default"
		},
		{
			"key": "base_url",
			"value": "",
			"type": "default"
		}
	]
}